# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dslwp_swig', [dirname(__file__)])
        except ImportError:
            import _dslwp_swig
            return _dslwp_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_dslwp_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dslwp_swig = swig_import_helper()
    del swig_import_helper
else:
    import _dslwp_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _dslwp_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _dslwp_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _dslwp_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _dslwp_swig.high_res_timer_epoch()
class tm_header_parser(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::tm_header_parser.

    To avoid accidental use of raw pointers, dslwp::tm_header_parser's constructor is in a private implementation class. dslwp::tm_header_parser::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> tm_header_parser_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::tm_header_parser.

        To avoid accidental use of raw pointers, dslwp::tm_header_parser's constructor is in a private implementation class. dslwp::tm_header_parser::make is the public interface for creating new instances.
        """
        return _dslwp_swig.tm_header_parser_make()

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_tm_header_parser
    __del__ = lambda self: None
tm_header_parser_swigregister = _dslwp_swig.tm_header_parser_swigregister
tm_header_parser_swigregister(tm_header_parser)

def tm_header_parser_make():
    """
    tm_header_parser_make() -> tm_header_parser_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::tm_header_parser.

    To avoid accidental use of raw pointers, dslwp::tm_header_parser's constructor is in a private implementation class. dslwp::tm_header_parser::make is the public interface for creating new instances.
    """
    return _dslwp_swig.tm_header_parser_make()

class tm_header_parser_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::tm_header_parser)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::tm_header_parser)> self) -> tm_header_parser_sptr
        __init__(boost::shared_ptr<(gr::dslwp::tm_header_parser)> self, tm_header_parser p) -> tm_header_parser_sptr
        """
        this = _dslwp_swig.new_tm_header_parser_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tm_header_parser_sptr self) -> tm_header_parser"""
        return _dslwp_swig.tm_header_parser_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_tm_header_parser_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(tm_header_parser_sptr self) -> tm_header_parser_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::tm_header_parser.

        To avoid accidental use of raw pointers, dslwp::tm_header_parser's constructor is in a private implementation class. dslwp::tm_header_parser::make is the public interface for creating new instances.
        """
        return _dslwp_swig.tm_header_parser_sptr_make(self)


    def history(self):
        """history(tm_header_parser_sptr self) -> unsigned int"""
        return _dslwp_swig.tm_header_parser_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tm_header_parser_sptr self, int which, int delay)
        declare_sample_delay(tm_header_parser_sptr self, unsigned int delay)
        """
        return _dslwp_swig.tm_header_parser_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tm_header_parser_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.tm_header_parser_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tm_header_parser_sptr self) -> int"""
        return _dslwp_swig.tm_header_parser_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tm_header_parser_sptr self) -> double"""
        return _dslwp_swig.tm_header_parser_sptr_relative_rate(self)


    def start(self):
        """start(tm_header_parser_sptr self) -> bool"""
        return _dslwp_swig.tm_header_parser_sptr_start(self)


    def stop(self):
        """stop(tm_header_parser_sptr self) -> bool"""
        return _dslwp_swig.tm_header_parser_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tm_header_parser_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.tm_header_parser_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tm_header_parser_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.tm_header_parser_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tm_header_parser_sptr self) -> int"""
        return _dslwp_swig.tm_header_parser_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tm_header_parser_sptr self, int m)"""
        return _dslwp_swig.tm_header_parser_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tm_header_parser_sptr self)"""
        return _dslwp_swig.tm_header_parser_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tm_header_parser_sptr self) -> bool"""
        return _dslwp_swig.tm_header_parser_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tm_header_parser_sptr self, int m)"""
        return _dslwp_swig.tm_header_parser_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tm_header_parser_sptr self) -> int"""
        return _dslwp_swig.tm_header_parser_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tm_header_parser_sptr self, int i) -> long"""
        return _dslwp_swig.tm_header_parser_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tm_header_parser_sptr self, long max_output_buffer)
        set_max_output_buffer(tm_header_parser_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.tm_header_parser_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tm_header_parser_sptr self, int i) -> long"""
        return _dslwp_swig.tm_header_parser_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tm_header_parser_sptr self, long min_output_buffer)
        set_min_output_buffer(tm_header_parser_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.tm_header_parser_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tm_header_parser_sptr self, int which) -> float
        pc_input_buffers_full(tm_header_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_header_parser_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tm_header_parser_sptr self, int which) -> float
        pc_input_buffers_full_avg(tm_header_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_header_parser_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tm_header_parser_sptr self, int which) -> float
        pc_input_buffers_full_var(tm_header_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_header_parser_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tm_header_parser_sptr self, int which) -> float
        pc_output_buffers_full(tm_header_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_header_parser_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tm_header_parser_sptr self, int which) -> float
        pc_output_buffers_full_avg(tm_header_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_header_parser_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tm_header_parser_sptr self, int which) -> float
        pc_output_buffers_full_var(tm_header_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_header_parser_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tm_header_parser_sptr self) -> float"""
        return _dslwp_swig.tm_header_parser_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tm_header_parser_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.tm_header_parser_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tm_header_parser_sptr self)"""
        return _dslwp_swig.tm_header_parser_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tm_header_parser_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.tm_header_parser_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tm_header_parser_sptr self) -> int"""
        return _dslwp_swig.tm_header_parser_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tm_header_parser_sptr self) -> int"""
        return _dslwp_swig.tm_header_parser_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tm_header_parser_sptr self, int priority) -> int"""
        return _dslwp_swig.tm_header_parser_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tm_header_parser_sptr self) -> std::string"""
        return _dslwp_swig.tm_header_parser_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tm_header_parser_sptr self) -> std::string"""
        return _dslwp_swig.tm_header_parser_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tm_header_parser_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.tm_header_parser_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tm_header_parser_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.tm_header_parser_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tm_header_parser_sptr self) -> long"""
        return _dslwp_swig.tm_header_parser_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tm_header_parser_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.tm_header_parser_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tm_header_parser_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.tm_header_parser_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tm_header_parser_sptr self) -> std::string"""
        return _dslwp_swig.tm_header_parser_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tm_header_parser_sptr self, std::string name)"""
        return _dslwp_swig.tm_header_parser_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tm_header_parser_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.tm_header_parser_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tm_header_parser_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.tm_header_parser_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tm_header_parser_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.tm_header_parser_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tm_header_parser_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.tm_header_parser_sptr_message_subscribers(self, which_port)

tm_header_parser_sptr_swigregister = _dslwp_swig.tm_header_parser_sptr_swigregister
tm_header_parser_sptr_swigregister(tm_header_parser_sptr)


tm_header_parser_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tm_header_parser = tm_header_parser.make;

class tm_parser(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::tm_parser.

    To avoid accidental use of raw pointers, dslwp::tm_parser's constructor is in a private implementation class. dslwp::tm_parser::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> tm_parser_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::tm_parser.

        To avoid accidental use of raw pointers, dslwp::tm_parser's constructor is in a private implementation class. dslwp::tm_parser::make is the public interface for creating new instances.
        """
        return _dslwp_swig.tm_parser_make()

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_tm_parser
    __del__ = lambda self: None
tm_parser_swigregister = _dslwp_swig.tm_parser_swigregister
tm_parser_swigregister(tm_parser)

def tm_parser_make():
    """
    tm_parser_make() -> tm_parser_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::tm_parser.

    To avoid accidental use of raw pointers, dslwp::tm_parser's constructor is in a private implementation class. dslwp::tm_parser::make is the public interface for creating new instances.
    """
    return _dslwp_swig.tm_parser_make()

class tm_parser_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::tm_parser)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::tm_parser)> self) -> tm_parser_sptr
        __init__(boost::shared_ptr<(gr::dslwp::tm_parser)> self, tm_parser p) -> tm_parser_sptr
        """
        this = _dslwp_swig.new_tm_parser_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tm_parser_sptr self) -> tm_parser"""
        return _dslwp_swig.tm_parser_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_tm_parser_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(tm_parser_sptr self) -> tm_parser_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::tm_parser.

        To avoid accidental use of raw pointers, dslwp::tm_parser's constructor is in a private implementation class. dslwp::tm_parser::make is the public interface for creating new instances.
        """
        return _dslwp_swig.tm_parser_sptr_make(self)


    def history(self):
        """history(tm_parser_sptr self) -> unsigned int"""
        return _dslwp_swig.tm_parser_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tm_parser_sptr self, int which, int delay)
        declare_sample_delay(tm_parser_sptr self, unsigned int delay)
        """
        return _dslwp_swig.tm_parser_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tm_parser_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.tm_parser_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tm_parser_sptr self) -> int"""
        return _dslwp_swig.tm_parser_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tm_parser_sptr self) -> double"""
        return _dslwp_swig.tm_parser_sptr_relative_rate(self)


    def start(self):
        """start(tm_parser_sptr self) -> bool"""
        return _dslwp_swig.tm_parser_sptr_start(self)


    def stop(self):
        """stop(tm_parser_sptr self) -> bool"""
        return _dslwp_swig.tm_parser_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tm_parser_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.tm_parser_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tm_parser_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.tm_parser_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tm_parser_sptr self) -> int"""
        return _dslwp_swig.tm_parser_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tm_parser_sptr self, int m)"""
        return _dslwp_swig.tm_parser_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tm_parser_sptr self)"""
        return _dslwp_swig.tm_parser_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tm_parser_sptr self) -> bool"""
        return _dslwp_swig.tm_parser_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tm_parser_sptr self, int m)"""
        return _dslwp_swig.tm_parser_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tm_parser_sptr self) -> int"""
        return _dslwp_swig.tm_parser_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tm_parser_sptr self, int i) -> long"""
        return _dslwp_swig.tm_parser_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tm_parser_sptr self, long max_output_buffer)
        set_max_output_buffer(tm_parser_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.tm_parser_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tm_parser_sptr self, int i) -> long"""
        return _dslwp_swig.tm_parser_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tm_parser_sptr self, long min_output_buffer)
        set_min_output_buffer(tm_parser_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.tm_parser_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tm_parser_sptr self, int which) -> float
        pc_input_buffers_full(tm_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_parser_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tm_parser_sptr self, int which) -> float
        pc_input_buffers_full_avg(tm_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_parser_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tm_parser_sptr self, int which) -> float
        pc_input_buffers_full_var(tm_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_parser_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tm_parser_sptr self, int which) -> float
        pc_output_buffers_full(tm_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_parser_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tm_parser_sptr self, int which) -> float
        pc_output_buffers_full_avg(tm_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_parser_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tm_parser_sptr self, int which) -> float
        pc_output_buffers_full_var(tm_parser_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.tm_parser_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tm_parser_sptr self) -> float"""
        return _dslwp_swig.tm_parser_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tm_parser_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.tm_parser_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tm_parser_sptr self)"""
        return _dslwp_swig.tm_parser_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tm_parser_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.tm_parser_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tm_parser_sptr self) -> int"""
        return _dslwp_swig.tm_parser_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tm_parser_sptr self) -> int"""
        return _dslwp_swig.tm_parser_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tm_parser_sptr self, int priority) -> int"""
        return _dslwp_swig.tm_parser_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tm_parser_sptr self) -> std::string"""
        return _dslwp_swig.tm_parser_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tm_parser_sptr self) -> std::string"""
        return _dslwp_swig.tm_parser_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tm_parser_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.tm_parser_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tm_parser_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.tm_parser_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tm_parser_sptr self) -> long"""
        return _dslwp_swig.tm_parser_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tm_parser_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.tm_parser_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tm_parser_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.tm_parser_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tm_parser_sptr self) -> std::string"""
        return _dslwp_swig.tm_parser_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tm_parser_sptr self, std::string name)"""
        return _dslwp_swig.tm_parser_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tm_parser_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.tm_parser_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tm_parser_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.tm_parser_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tm_parser_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.tm_parser_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tm_parser_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.tm_parser_sptr_message_subscribers(self, which_port)

tm_parser_sptr_swigregister = _dslwp_swig.tm_parser_sptr_swigregister
tm_parser_sptr_swigregister(tm_parser_sptr)


tm_parser_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tm_parser = tm_parser.make;

class steam_to_vector_moving_window_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::steam_to_vector_moving_window_cc.

    To avoid accidental use of raw pointers, dslwp::steam_to_vector_moving_window_cc's constructor is in a private implementation class. dslwp::steam_to_vector_moving_window_cc::make is the public interface for creating new instances.

    Args:
        vlen : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vlen):
        """
        make(size_t vlen) -> steam_to_vector_moving_window_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::steam_to_vector_moving_window_cc.

        To avoid accidental use of raw pointers, dslwp::steam_to_vector_moving_window_cc's constructor is in a private implementation class. dslwp::steam_to_vector_moving_window_cc::make is the public interface for creating new instances.

        Args:
            vlen : 
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_steam_to_vector_moving_window_cc
    __del__ = lambda self: None
steam_to_vector_moving_window_cc_swigregister = _dslwp_swig.steam_to_vector_moving_window_cc_swigregister
steam_to_vector_moving_window_cc_swigregister(steam_to_vector_moving_window_cc)

def steam_to_vector_moving_window_cc_make(vlen):
    """
    steam_to_vector_moving_window_cc_make(size_t vlen) -> steam_to_vector_moving_window_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::steam_to_vector_moving_window_cc.

    To avoid accidental use of raw pointers, dslwp::steam_to_vector_moving_window_cc's constructor is in a private implementation class. dslwp::steam_to_vector_moving_window_cc::make is the public interface for creating new instances.

    Args:
        vlen : 
    """
    return _dslwp_swig.steam_to_vector_moving_window_cc_make(vlen)

class steam_to_vector_moving_window_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::steam_to_vector_moving_window_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::steam_to_vector_moving_window_cc)> self) -> steam_to_vector_moving_window_cc_sptr
        __init__(boost::shared_ptr<(gr::dslwp::steam_to_vector_moving_window_cc)> self, steam_to_vector_moving_window_cc p) -> steam_to_vector_moving_window_cc_sptr
        """
        this = _dslwp_swig.new_steam_to_vector_moving_window_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(steam_to_vector_moving_window_cc_sptr self) -> steam_to_vector_moving_window_cc"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_steam_to_vector_moving_window_cc_sptr
    __del__ = lambda self: None

    def make(self, vlen):
        """
        make(steam_to_vector_moving_window_cc_sptr self, size_t vlen) -> steam_to_vector_moving_window_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::steam_to_vector_moving_window_cc.

        To avoid accidental use of raw pointers, dslwp::steam_to_vector_moving_window_cc's constructor is in a private implementation class. dslwp::steam_to_vector_moving_window_cc::make is the public interface for creating new instances.

        Args:
            vlen : 
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_make(self, vlen)


    def history(self):
        """history(steam_to_vector_moving_window_cc_sptr self) -> unsigned int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(steam_to_vector_moving_window_cc_sptr self, int which, int delay)
        declare_sample_delay(steam_to_vector_moving_window_cc_sptr self, unsigned int delay)
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(steam_to_vector_moving_window_cc_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(steam_to_vector_moving_window_cc_sptr self) -> int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(steam_to_vector_moving_window_cc_sptr self) -> double"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_relative_rate(self)


    def start(self):
        """start(steam_to_vector_moving_window_cc_sptr self) -> bool"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_start(self)


    def stop(self):
        """stop(steam_to_vector_moving_window_cc_sptr self) -> bool"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(steam_to_vector_moving_window_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(steam_to_vector_moving_window_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(steam_to_vector_moving_window_cc_sptr self) -> int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(steam_to_vector_moving_window_cc_sptr self, int m)"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(steam_to_vector_moving_window_cc_sptr self)"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(steam_to_vector_moving_window_cc_sptr self) -> bool"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(steam_to_vector_moving_window_cc_sptr self, int m)"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(steam_to_vector_moving_window_cc_sptr self) -> int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(steam_to_vector_moving_window_cc_sptr self, int i) -> long"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(steam_to_vector_moving_window_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(steam_to_vector_moving_window_cc_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(steam_to_vector_moving_window_cc_sptr self, int i) -> long"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(steam_to_vector_moving_window_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(steam_to_vector_moving_window_cc_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(steam_to_vector_moving_window_cc_sptr self, int which) -> float
        pc_input_buffers_full(steam_to_vector_moving_window_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(steam_to_vector_moving_window_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(steam_to_vector_moving_window_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(steam_to_vector_moving_window_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(steam_to_vector_moving_window_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(steam_to_vector_moving_window_cc_sptr self, int which) -> float
        pc_output_buffers_full(steam_to_vector_moving_window_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(steam_to_vector_moving_window_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(steam_to_vector_moving_window_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(steam_to_vector_moving_window_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(steam_to_vector_moving_window_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(steam_to_vector_moving_window_cc_sptr self) -> float"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(steam_to_vector_moving_window_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(steam_to_vector_moving_window_cc_sptr self)"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(steam_to_vector_moving_window_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(steam_to_vector_moving_window_cc_sptr self) -> int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(steam_to_vector_moving_window_cc_sptr self) -> int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(steam_to_vector_moving_window_cc_sptr self, int priority) -> int"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(steam_to_vector_moving_window_cc_sptr self) -> std::string"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(steam_to_vector_moving_window_cc_sptr self) -> std::string"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(steam_to_vector_moving_window_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(steam_to_vector_moving_window_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(steam_to_vector_moving_window_cc_sptr self) -> long"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(steam_to_vector_moving_window_cc_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(steam_to_vector_moving_window_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(steam_to_vector_moving_window_cc_sptr self) -> std::string"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(steam_to_vector_moving_window_cc_sptr self, std::string name)"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(steam_to_vector_moving_window_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(steam_to_vector_moving_window_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(steam_to_vector_moving_window_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(steam_to_vector_moving_window_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.steam_to_vector_moving_window_cc_sptr_message_subscribers(self, which_port)

steam_to_vector_moving_window_cc_sptr_swigregister = _dslwp_swig.steam_to_vector_moving_window_cc_sptr_swigregister
steam_to_vector_moving_window_cc_sptr_swigregister(steam_to_vector_moving_window_cc_sptr)


steam_to_vector_moving_window_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
steam_to_vector_moving_window_cc = steam_to_vector_moving_window_cc.make;

class vector_padding_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::vector_padding_cc.

    To avoid accidental use of raw pointers, dslwp::vector_padding_cc's constructor is in a private implementation class. dslwp::vector_padding_cc::make is the public interface for creating new instances.

    Args:
        padding : 
        position : 
        vlen_in : 
        vlen_out : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(padding, position, vlen_in, vlen_out):
        """
        make(gr_complex padding, int position, size_t vlen_in, size_t vlen_out) -> vector_padding_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::vector_padding_cc.

        To avoid accidental use of raw pointers, dslwp::vector_padding_cc's constructor is in a private implementation class. dslwp::vector_padding_cc::make is the public interface for creating new instances.

        Args:
            padding : 
            position : 
            vlen_in : 
            vlen_out : 
        """
        return _dslwp_swig.vector_padding_cc_make(padding, position, vlen_in, vlen_out)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_vector_padding_cc
    __del__ = lambda self: None
vector_padding_cc_swigregister = _dslwp_swig.vector_padding_cc_swigregister
vector_padding_cc_swigregister(vector_padding_cc)

def vector_padding_cc_make(padding, position, vlen_in, vlen_out):
    """
    vector_padding_cc_make(gr_complex padding, int position, size_t vlen_in, size_t vlen_out) -> vector_padding_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::vector_padding_cc.

    To avoid accidental use of raw pointers, dslwp::vector_padding_cc's constructor is in a private implementation class. dslwp::vector_padding_cc::make is the public interface for creating new instances.

    Args:
        padding : 
        position : 
        vlen_in : 
        vlen_out : 
    """
    return _dslwp_swig.vector_padding_cc_make(padding, position, vlen_in, vlen_out)

class vector_padding_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::vector_padding_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::vector_padding_cc)> self) -> vector_padding_cc_sptr
        __init__(boost::shared_ptr<(gr::dslwp::vector_padding_cc)> self, vector_padding_cc p) -> vector_padding_cc_sptr
        """
        this = _dslwp_swig.new_vector_padding_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(vector_padding_cc_sptr self) -> vector_padding_cc"""
        return _dslwp_swig.vector_padding_cc_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_vector_padding_cc_sptr
    __del__ = lambda self: None

    def make(self, padding, position, vlen_in, vlen_out):
        """
        make(vector_padding_cc_sptr self, gr_complex padding, int position, size_t vlen_in, size_t vlen_out) -> vector_padding_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::vector_padding_cc.

        To avoid accidental use of raw pointers, dslwp::vector_padding_cc's constructor is in a private implementation class. dslwp::vector_padding_cc::make is the public interface for creating new instances.

        Args:
            padding : 
            position : 
            vlen_in : 
            vlen_out : 
        """
        return _dslwp_swig.vector_padding_cc_sptr_make(self, padding, position, vlen_in, vlen_out)


    def history(self):
        """history(vector_padding_cc_sptr self) -> unsigned int"""
        return _dslwp_swig.vector_padding_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(vector_padding_cc_sptr self, int which, int delay)
        declare_sample_delay(vector_padding_cc_sptr self, unsigned int delay)
        """
        return _dslwp_swig.vector_padding_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(vector_padding_cc_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.vector_padding_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(vector_padding_cc_sptr self) -> int"""
        return _dslwp_swig.vector_padding_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(vector_padding_cc_sptr self) -> double"""
        return _dslwp_swig.vector_padding_cc_sptr_relative_rate(self)


    def start(self):
        """start(vector_padding_cc_sptr self) -> bool"""
        return _dslwp_swig.vector_padding_cc_sptr_start(self)


    def stop(self):
        """stop(vector_padding_cc_sptr self) -> bool"""
        return _dslwp_swig.vector_padding_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(vector_padding_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.vector_padding_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(vector_padding_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.vector_padding_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(vector_padding_cc_sptr self) -> int"""
        return _dslwp_swig.vector_padding_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(vector_padding_cc_sptr self, int m)"""
        return _dslwp_swig.vector_padding_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vector_padding_cc_sptr self)"""
        return _dslwp_swig.vector_padding_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vector_padding_cc_sptr self) -> bool"""
        return _dslwp_swig.vector_padding_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(vector_padding_cc_sptr self, int m)"""
        return _dslwp_swig.vector_padding_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(vector_padding_cc_sptr self) -> int"""
        return _dslwp_swig.vector_padding_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(vector_padding_cc_sptr self, int i) -> long"""
        return _dslwp_swig.vector_padding_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vector_padding_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(vector_padding_cc_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.vector_padding_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(vector_padding_cc_sptr self, int i) -> long"""
        return _dslwp_swig.vector_padding_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vector_padding_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(vector_padding_cc_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.vector_padding_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vector_padding_cc_sptr self, int which) -> float
        pc_input_buffers_full(vector_padding_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.vector_padding_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(vector_padding_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(vector_padding_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.vector_padding_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vector_padding_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(vector_padding_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.vector_padding_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vector_padding_cc_sptr self, int which) -> float
        pc_output_buffers_full(vector_padding_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.vector_padding_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(vector_padding_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(vector_padding_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.vector_padding_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vector_padding_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(vector_padding_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.vector_padding_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(vector_padding_cc_sptr self) -> float"""
        return _dslwp_swig.vector_padding_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(vector_padding_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.vector_padding_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(vector_padding_cc_sptr self)"""
        return _dslwp_swig.vector_padding_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(vector_padding_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.vector_padding_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(vector_padding_cc_sptr self) -> int"""
        return _dslwp_swig.vector_padding_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(vector_padding_cc_sptr self) -> int"""
        return _dslwp_swig.vector_padding_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(vector_padding_cc_sptr self, int priority) -> int"""
        return _dslwp_swig.vector_padding_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(vector_padding_cc_sptr self) -> std::string"""
        return _dslwp_swig.vector_padding_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(vector_padding_cc_sptr self) -> std::string"""
        return _dslwp_swig.vector_padding_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(vector_padding_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.vector_padding_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(vector_padding_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.vector_padding_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(vector_padding_cc_sptr self) -> long"""
        return _dslwp_swig.vector_padding_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(vector_padding_cc_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.vector_padding_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(vector_padding_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.vector_padding_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(vector_padding_cc_sptr self) -> std::string"""
        return _dslwp_swig.vector_padding_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(vector_padding_cc_sptr self, std::string name)"""
        return _dslwp_swig.vector_padding_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(vector_padding_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.vector_padding_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(vector_padding_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.vector_padding_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(vector_padding_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.vector_padding_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(vector_padding_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.vector_padding_cc_sptr_message_subscribers(self, which_port)

vector_padding_cc_sptr_swigregister = _dslwp_swig.vector_padding_cc_sptr_swigregister
vector_padding_cc_sptr_swigregister(vector_padding_cc_sptr)


vector_padding_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vector_padding_cc = vector_padding_cc.make;

class fft_estimator_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::fft_estimator_cc.

    To avoid accidental use of raw pointers, dslwp::fft_estimator_cc's constructor is in a private implementation class. dslwp::fft_estimator_cc::make is the public interface for creating new instances.

    Args:
        fft_size : 
        threshold : 
        tap_len : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fft_size, threshold, tap_len):
        """
        make(size_t fft_size, float threshold, size_t tap_len) -> fft_estimator_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::fft_estimator_cc.

        To avoid accidental use of raw pointers, dslwp::fft_estimator_cc's constructor is in a private implementation class. dslwp::fft_estimator_cc::make is the public interface for creating new instances.

        Args:
            fft_size : 
            threshold : 
            tap_len : 
        """
        return _dslwp_swig.fft_estimator_cc_make(fft_size, threshold, tap_len)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_fft_estimator_cc
    __del__ = lambda self: None
fft_estimator_cc_swigregister = _dslwp_swig.fft_estimator_cc_swigregister
fft_estimator_cc_swigregister(fft_estimator_cc)

def fft_estimator_cc_make(fft_size, threshold, tap_len):
    """
    fft_estimator_cc_make(size_t fft_size, float threshold, size_t tap_len) -> fft_estimator_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::fft_estimator_cc.

    To avoid accidental use of raw pointers, dslwp::fft_estimator_cc's constructor is in a private implementation class. dslwp::fft_estimator_cc::make is the public interface for creating new instances.

    Args:
        fft_size : 
        threshold : 
        tap_len : 
    """
    return _dslwp_swig.fft_estimator_cc_make(fft_size, threshold, tap_len)

class fft_estimator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::fft_estimator_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::fft_estimator_cc)> self) -> fft_estimator_cc_sptr
        __init__(boost::shared_ptr<(gr::dslwp::fft_estimator_cc)> self, fft_estimator_cc p) -> fft_estimator_cc_sptr
        """
        this = _dslwp_swig.new_fft_estimator_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fft_estimator_cc_sptr self) -> fft_estimator_cc"""
        return _dslwp_swig.fft_estimator_cc_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_fft_estimator_cc_sptr
    __del__ = lambda self: None

    def make(self, fft_size, threshold, tap_len):
        """
        make(fft_estimator_cc_sptr self, size_t fft_size, float threshold, size_t tap_len) -> fft_estimator_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::fft_estimator_cc.

        To avoid accidental use of raw pointers, dslwp::fft_estimator_cc's constructor is in a private implementation class. dslwp::fft_estimator_cc::make is the public interface for creating new instances.

        Args:
            fft_size : 
            threshold : 
            tap_len : 
        """
        return _dslwp_swig.fft_estimator_cc_sptr_make(self, fft_size, threshold, tap_len)


    def history(self):
        """history(fft_estimator_cc_sptr self) -> unsigned int"""
        return _dslwp_swig.fft_estimator_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fft_estimator_cc_sptr self, int which, int delay)
        declare_sample_delay(fft_estimator_cc_sptr self, unsigned int delay)
        """
        return _dslwp_swig.fft_estimator_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fft_estimator_cc_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.fft_estimator_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fft_estimator_cc_sptr self) -> int"""
        return _dslwp_swig.fft_estimator_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fft_estimator_cc_sptr self) -> double"""
        return _dslwp_swig.fft_estimator_cc_sptr_relative_rate(self)


    def start(self):
        """start(fft_estimator_cc_sptr self) -> bool"""
        return _dslwp_swig.fft_estimator_cc_sptr_start(self)


    def stop(self):
        """stop(fft_estimator_cc_sptr self) -> bool"""
        return _dslwp_swig.fft_estimator_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fft_estimator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.fft_estimator_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fft_estimator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.fft_estimator_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fft_estimator_cc_sptr self) -> int"""
        return _dslwp_swig.fft_estimator_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fft_estimator_cc_sptr self, int m)"""
        return _dslwp_swig.fft_estimator_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fft_estimator_cc_sptr self)"""
        return _dslwp_swig.fft_estimator_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fft_estimator_cc_sptr self) -> bool"""
        return _dslwp_swig.fft_estimator_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fft_estimator_cc_sptr self, int m)"""
        return _dslwp_swig.fft_estimator_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fft_estimator_cc_sptr self) -> int"""
        return _dslwp_swig.fft_estimator_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fft_estimator_cc_sptr self, int i) -> long"""
        return _dslwp_swig.fft_estimator_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fft_estimator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(fft_estimator_cc_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.fft_estimator_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fft_estimator_cc_sptr self, int i) -> long"""
        return _dslwp_swig.fft_estimator_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fft_estimator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(fft_estimator_cc_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.fft_estimator_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fft_estimator_cc_sptr self, int which) -> float
        pc_input_buffers_full(fft_estimator_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fft_estimator_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fft_estimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(fft_estimator_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fft_estimator_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fft_estimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(fft_estimator_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fft_estimator_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fft_estimator_cc_sptr self, int which) -> float
        pc_output_buffers_full(fft_estimator_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fft_estimator_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fft_estimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(fft_estimator_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fft_estimator_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fft_estimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(fft_estimator_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fft_estimator_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fft_estimator_cc_sptr self) -> float"""
        return _dslwp_swig.fft_estimator_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fft_estimator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.fft_estimator_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fft_estimator_cc_sptr self)"""
        return _dslwp_swig.fft_estimator_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fft_estimator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.fft_estimator_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fft_estimator_cc_sptr self) -> int"""
        return _dslwp_swig.fft_estimator_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fft_estimator_cc_sptr self) -> int"""
        return _dslwp_swig.fft_estimator_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fft_estimator_cc_sptr self, int priority) -> int"""
        return _dslwp_swig.fft_estimator_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fft_estimator_cc_sptr self) -> std::string"""
        return _dslwp_swig.fft_estimator_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fft_estimator_cc_sptr self) -> std::string"""
        return _dslwp_swig.fft_estimator_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fft_estimator_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.fft_estimator_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fft_estimator_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.fft_estimator_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fft_estimator_cc_sptr self) -> long"""
        return _dslwp_swig.fft_estimator_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fft_estimator_cc_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.fft_estimator_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fft_estimator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.fft_estimator_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fft_estimator_cc_sptr self) -> std::string"""
        return _dslwp_swig.fft_estimator_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fft_estimator_cc_sptr self, std::string name)"""
        return _dslwp_swig.fft_estimator_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fft_estimator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.fft_estimator_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fft_estimator_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.fft_estimator_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fft_estimator_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.fft_estimator_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fft_estimator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.fft_estimator_cc_sptr_message_subscribers(self, which_port)

fft_estimator_cc_sptr_swigregister = _dslwp_swig.fft_estimator_cc_sptr_swigregister
fft_estimator_cc_sptr_swigregister(fft_estimator_cc_sptr)


fft_estimator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_estimator_cc = fft_estimator_cc.make;

class set_gain_by_tag_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::set_gain_by_tag_cc.

    To avoid accidental use of raw pointers, dslwp::set_gain_by_tag_cc's constructor is in a private implementation class. dslwp::set_gain_by_tag_cc::make is the public interface for creating new instances.

    Args:
        k : 
        gain : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(k, gain):
        """
        make(float k, float gain) -> set_gain_by_tag_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::set_gain_by_tag_cc.

        To avoid accidental use of raw pointers, dslwp::set_gain_by_tag_cc's constructor is in a private implementation class. dslwp::set_gain_by_tag_cc::make is the public interface for creating new instances.

        Args:
            k : 
            gain : 
        """
        return _dslwp_swig.set_gain_by_tag_cc_make(k, gain)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_set_gain_by_tag_cc
    __del__ = lambda self: None
set_gain_by_tag_cc_swigregister = _dslwp_swig.set_gain_by_tag_cc_swigregister
set_gain_by_tag_cc_swigregister(set_gain_by_tag_cc)

def set_gain_by_tag_cc_make(k, gain):
    """
    set_gain_by_tag_cc_make(float k, float gain) -> set_gain_by_tag_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::set_gain_by_tag_cc.

    To avoid accidental use of raw pointers, dslwp::set_gain_by_tag_cc's constructor is in a private implementation class. dslwp::set_gain_by_tag_cc::make is the public interface for creating new instances.

    Args:
        k : 
        gain : 
    """
    return _dslwp_swig.set_gain_by_tag_cc_make(k, gain)

class set_gain_by_tag_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::set_gain_by_tag_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::set_gain_by_tag_cc)> self) -> set_gain_by_tag_cc_sptr
        __init__(boost::shared_ptr<(gr::dslwp::set_gain_by_tag_cc)> self, set_gain_by_tag_cc p) -> set_gain_by_tag_cc_sptr
        """
        this = _dslwp_swig.new_set_gain_by_tag_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(set_gain_by_tag_cc_sptr self) -> set_gain_by_tag_cc"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_set_gain_by_tag_cc_sptr
    __del__ = lambda self: None

    def make(self, k, gain):
        """
        make(set_gain_by_tag_cc_sptr self, float k, float gain) -> set_gain_by_tag_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::set_gain_by_tag_cc.

        To avoid accidental use of raw pointers, dslwp::set_gain_by_tag_cc's constructor is in a private implementation class. dslwp::set_gain_by_tag_cc::make is the public interface for creating new instances.

        Args:
            k : 
            gain : 
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_make(self, k, gain)


    def history(self):
        """history(set_gain_by_tag_cc_sptr self) -> unsigned int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(set_gain_by_tag_cc_sptr self, int which, int delay)
        declare_sample_delay(set_gain_by_tag_cc_sptr self, unsigned int delay)
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(set_gain_by_tag_cc_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(set_gain_by_tag_cc_sptr self) -> int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(set_gain_by_tag_cc_sptr self) -> double"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_relative_rate(self)


    def start(self):
        """start(set_gain_by_tag_cc_sptr self) -> bool"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_start(self)


    def stop(self):
        """stop(set_gain_by_tag_cc_sptr self) -> bool"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(set_gain_by_tag_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(set_gain_by_tag_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(set_gain_by_tag_cc_sptr self) -> int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(set_gain_by_tag_cc_sptr self, int m)"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(set_gain_by_tag_cc_sptr self)"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(set_gain_by_tag_cc_sptr self) -> bool"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(set_gain_by_tag_cc_sptr self, int m)"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(set_gain_by_tag_cc_sptr self) -> int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(set_gain_by_tag_cc_sptr self, int i) -> long"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(set_gain_by_tag_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(set_gain_by_tag_cc_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(set_gain_by_tag_cc_sptr self, int i) -> long"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(set_gain_by_tag_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(set_gain_by_tag_cc_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(set_gain_by_tag_cc_sptr self, int which) -> float
        pc_input_buffers_full(set_gain_by_tag_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(set_gain_by_tag_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(set_gain_by_tag_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(set_gain_by_tag_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(set_gain_by_tag_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(set_gain_by_tag_cc_sptr self, int which) -> float
        pc_output_buffers_full(set_gain_by_tag_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(set_gain_by_tag_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(set_gain_by_tag_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(set_gain_by_tag_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(set_gain_by_tag_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(set_gain_by_tag_cc_sptr self) -> float"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(set_gain_by_tag_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(set_gain_by_tag_cc_sptr self)"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(set_gain_by_tag_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(set_gain_by_tag_cc_sptr self) -> int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(set_gain_by_tag_cc_sptr self) -> int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(set_gain_by_tag_cc_sptr self, int priority) -> int"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(set_gain_by_tag_cc_sptr self) -> std::string"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(set_gain_by_tag_cc_sptr self) -> std::string"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(set_gain_by_tag_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(set_gain_by_tag_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(set_gain_by_tag_cc_sptr self) -> long"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(set_gain_by_tag_cc_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(set_gain_by_tag_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(set_gain_by_tag_cc_sptr self) -> std::string"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(set_gain_by_tag_cc_sptr self, std::string name)"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(set_gain_by_tag_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(set_gain_by_tag_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(set_gain_by_tag_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(set_gain_by_tag_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.set_gain_by_tag_cc_sptr_message_subscribers(self, which_port)

set_gain_by_tag_cc_sptr_swigregister = _dslwp_swig.set_gain_by_tag_cc_sptr_swigregister
set_gain_by_tag_cc_sptr_swigregister(set_gain_by_tag_cc_sptr)


set_gain_by_tag_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
set_gain_by_tag_cc = set_gain_by_tag_cc.make;

class oqpsk_coherent_demod_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::oqpsk_coherent_demod_cc.

    To avoid accidental use of raw pointers, dslwp::oqpsk_coherent_demod_cc's constructor is in a private implementation class. dslwp::oqpsk_coherent_demod_cc::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        pll : 
        pll_loop_bw : 
        pll_damping : 
        freq_max : 
        freq_min : 
        dttl : 
        dttl_loop_bw : 
        dttl_damping : 
        max_rate_deviation : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
        """
        make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherent_demod_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::oqpsk_coherent_demod_cc.

        To avoid accidental use of raw pointers, dslwp::oqpsk_coherent_demod_cc's constructor is in a private implementation class. dslwp::oqpsk_coherent_demod_cc::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            pll : 
            pll_loop_bw : 
            pll_damping : 
            freq_max : 
            freq_min : 
            dttl : 
            dttl_loop_bw : 
            dttl_damping : 
            max_rate_deviation : 
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_oqpsk_coherent_demod_cc
    __del__ = lambda self: None
oqpsk_coherent_demod_cc_swigregister = _dslwp_swig.oqpsk_coherent_demod_cc_swigregister
oqpsk_coherent_demod_cc_swigregister(oqpsk_coherent_demod_cc)

def oqpsk_coherent_demod_cc_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
    """
    oqpsk_coherent_demod_cc_make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherent_demod_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::oqpsk_coherent_demod_cc.

    To avoid accidental use of raw pointers, dslwp::oqpsk_coherent_demod_cc's constructor is in a private implementation class. dslwp::oqpsk_coherent_demod_cc::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        pll : 
        pll_loop_bw : 
        pll_damping : 
        freq_max : 
        freq_min : 
        dttl : 
        dttl_loop_bw : 
        dttl_damping : 
        max_rate_deviation : 
    """
    return _dslwp_swig.oqpsk_coherent_demod_cc_make(samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)

class oqpsk_coherent_demod_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::oqpsk_coherent_demod_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::oqpsk_coherent_demod_cc)> self) -> oqpsk_coherent_demod_cc_sptr
        __init__(boost::shared_ptr<(gr::dslwp::oqpsk_coherent_demod_cc)> self, oqpsk_coherent_demod_cc p) -> oqpsk_coherent_demod_cc_sptr
        """
        this = _dslwp_swig.new_oqpsk_coherent_demod_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(oqpsk_coherent_demod_cc_sptr self) -> oqpsk_coherent_demod_cc"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_oqpsk_coherent_demod_cc_sptr
    __del__ = lambda self: None

    def make(self, samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation):
        """
        make(oqpsk_coherent_demod_cc_sptr self, int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int pll, float pll_loop_bw, float pll_damping, float freq_max, float freq_min, int dttl, float dttl_loop_bw, float dttl_damping, float max_rate_deviation) -> oqpsk_coherent_demod_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::oqpsk_coherent_demod_cc.

        To avoid accidental use of raw pointers, dslwp::oqpsk_coherent_demod_cc's constructor is in a private implementation class. dslwp::oqpsk_coherent_demod_cc::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            pll : 
            pll_loop_bw : 
            pll_damping : 
            freq_max : 
            freq_min : 
            dttl : 
            dttl_loop_bw : 
            dttl_damping : 
            max_rate_deviation : 
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_make(self, samples_per_symbol, taps, opt_point, pll, pll_loop_bw, pll_damping, freq_max, freq_min, dttl, dttl_loop_bw, dttl_damping, max_rate_deviation)


    def history(self):
        """history(oqpsk_coherent_demod_cc_sptr self) -> unsigned int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(oqpsk_coherent_demod_cc_sptr self, int which, int delay)
        declare_sample_delay(oqpsk_coherent_demod_cc_sptr self, unsigned int delay)
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(oqpsk_coherent_demod_cc_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(oqpsk_coherent_demod_cc_sptr self) -> int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(oqpsk_coherent_demod_cc_sptr self) -> double"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_relative_rate(self)


    def start(self):
        """start(oqpsk_coherent_demod_cc_sptr self) -> bool"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_start(self)


    def stop(self):
        """stop(oqpsk_coherent_demod_cc_sptr self) -> bool"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(oqpsk_coherent_demod_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(oqpsk_coherent_demod_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(oqpsk_coherent_demod_cc_sptr self) -> int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(oqpsk_coherent_demod_cc_sptr self, int m)"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(oqpsk_coherent_demod_cc_sptr self)"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(oqpsk_coherent_demod_cc_sptr self) -> bool"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(oqpsk_coherent_demod_cc_sptr self, int m)"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(oqpsk_coherent_demod_cc_sptr self) -> int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(oqpsk_coherent_demod_cc_sptr self, int i) -> long"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(oqpsk_coherent_demod_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(oqpsk_coherent_demod_cc_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(oqpsk_coherent_demod_cc_sptr self, int i) -> long"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(oqpsk_coherent_demod_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(oqpsk_coherent_demod_cc_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(oqpsk_coherent_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full(oqpsk_coherent_demod_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(oqpsk_coherent_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(oqpsk_coherent_demod_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(oqpsk_coherent_demod_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(oqpsk_coherent_demod_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(oqpsk_coherent_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full(oqpsk_coherent_demod_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(oqpsk_coherent_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(oqpsk_coherent_demod_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(oqpsk_coherent_demod_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(oqpsk_coherent_demod_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(oqpsk_coherent_demod_cc_sptr self) -> float"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(oqpsk_coherent_demod_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(oqpsk_coherent_demod_cc_sptr self)"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(oqpsk_coherent_demod_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(oqpsk_coherent_demod_cc_sptr self) -> int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(oqpsk_coherent_demod_cc_sptr self) -> int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(oqpsk_coherent_demod_cc_sptr self, int priority) -> int"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(oqpsk_coherent_demod_cc_sptr self) -> std::string"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(oqpsk_coherent_demod_cc_sptr self) -> std::string"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(oqpsk_coherent_demod_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(oqpsk_coherent_demod_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(oqpsk_coherent_demod_cc_sptr self) -> long"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(oqpsk_coherent_demod_cc_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(oqpsk_coherent_demod_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(oqpsk_coherent_demod_cc_sptr self) -> std::string"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(oqpsk_coherent_demod_cc_sptr self, std::string name)"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(oqpsk_coherent_demod_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(oqpsk_coherent_demod_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(oqpsk_coherent_demod_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(oqpsk_coherent_demod_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.oqpsk_coherent_demod_cc_sptr_message_subscribers(self, which_port)

oqpsk_coherent_demod_cc_sptr_swigregister = _dslwp_swig.oqpsk_coherent_demod_cc_sptr_swigregister
oqpsk_coherent_demod_cc_sptr_swigregister(oqpsk_coherent_demod_cc_sptr)


oqpsk_coherent_demod_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
oqpsk_coherent_demod_cc = oqpsk_coherent_demod_cc.make;

class frame_spliter_c(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::frame_spliter_c.

    To avoid accidental use of raw pointers, dslwp::frame_spliter_c's constructor is in a private implementation class. dslwp::frame_spliter_c::make is the public interface for creating new instances.

    Args:
        key : 
        frame_length : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(key, frame_length):
        """
        make(std::string const & key, int frame_length) -> frame_spliter_c_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::frame_spliter_c.

        To avoid accidental use of raw pointers, dslwp::frame_spliter_c's constructor is in a private implementation class. dslwp::frame_spliter_c::make is the public interface for creating new instances.

        Args:
            key : 
            frame_length : 
        """
        return _dslwp_swig.frame_spliter_c_make(key, frame_length)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_frame_spliter_c
    __del__ = lambda self: None
frame_spliter_c_swigregister = _dslwp_swig.frame_spliter_c_swigregister
frame_spliter_c_swigregister(frame_spliter_c)

def frame_spliter_c_make(key, frame_length):
    """
    frame_spliter_c_make(std::string const & key, int frame_length) -> frame_spliter_c_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::frame_spliter_c.

    To avoid accidental use of raw pointers, dslwp::frame_spliter_c's constructor is in a private implementation class. dslwp::frame_spliter_c::make is the public interface for creating new instances.

    Args:
        key : 
        frame_length : 
    """
    return _dslwp_swig.frame_spliter_c_make(key, frame_length)

class frame_spliter_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::frame_spliter_c)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::frame_spliter_c)> self) -> frame_spliter_c_sptr
        __init__(boost::shared_ptr<(gr::dslwp::frame_spliter_c)> self, frame_spliter_c p) -> frame_spliter_c_sptr
        """
        this = _dslwp_swig.new_frame_spliter_c_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(frame_spliter_c_sptr self) -> frame_spliter_c"""
        return _dslwp_swig.frame_spliter_c_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_frame_spliter_c_sptr
    __del__ = lambda self: None

    def make(self, key, frame_length):
        """
        make(frame_spliter_c_sptr self, std::string const & key, int frame_length) -> frame_spliter_c_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::frame_spliter_c.

        To avoid accidental use of raw pointers, dslwp::frame_spliter_c's constructor is in a private implementation class. dslwp::frame_spliter_c::make is the public interface for creating new instances.

        Args:
            key : 
            frame_length : 
        """
        return _dslwp_swig.frame_spliter_c_sptr_make(self, key, frame_length)


    def history(self):
        """history(frame_spliter_c_sptr self) -> unsigned int"""
        return _dslwp_swig.frame_spliter_c_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(frame_spliter_c_sptr self, int which, int delay)
        declare_sample_delay(frame_spliter_c_sptr self, unsigned int delay)
        """
        return _dslwp_swig.frame_spliter_c_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(frame_spliter_c_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.frame_spliter_c_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(frame_spliter_c_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_c_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(frame_spliter_c_sptr self) -> double"""
        return _dslwp_swig.frame_spliter_c_sptr_relative_rate(self)


    def start(self):
        """start(frame_spliter_c_sptr self) -> bool"""
        return _dslwp_swig.frame_spliter_c_sptr_start(self)


    def stop(self):
        """stop(frame_spliter_c_sptr self) -> bool"""
        return _dslwp_swig.frame_spliter_c_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(frame_spliter_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.frame_spliter_c_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(frame_spliter_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.frame_spliter_c_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(frame_spliter_c_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_c_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(frame_spliter_c_sptr self, int m)"""
        return _dslwp_swig.frame_spliter_c_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(frame_spliter_c_sptr self)"""
        return _dslwp_swig.frame_spliter_c_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(frame_spliter_c_sptr self) -> bool"""
        return _dslwp_swig.frame_spliter_c_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(frame_spliter_c_sptr self, int m)"""
        return _dslwp_swig.frame_spliter_c_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(frame_spliter_c_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_c_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(frame_spliter_c_sptr self, int i) -> long"""
        return _dslwp_swig.frame_spliter_c_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(frame_spliter_c_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_spliter_c_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.frame_spliter_c_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(frame_spliter_c_sptr self, int i) -> long"""
        return _dslwp_swig.frame_spliter_c_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(frame_spliter_c_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_spliter_c_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.frame_spliter_c_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(frame_spliter_c_sptr self, int which) -> float
        pc_input_buffers_full(frame_spliter_c_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_c_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(frame_spliter_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_spliter_c_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_c_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(frame_spliter_c_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_spliter_c_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_c_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(frame_spliter_c_sptr self, int which) -> float
        pc_output_buffers_full(frame_spliter_c_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_c_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(frame_spliter_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_spliter_c_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_c_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(frame_spliter_c_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_spliter_c_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_c_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(frame_spliter_c_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_c_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(frame_spliter_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.frame_spliter_c_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(frame_spliter_c_sptr self)"""
        return _dslwp_swig.frame_spliter_c_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(frame_spliter_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.frame_spliter_c_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(frame_spliter_c_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_c_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(frame_spliter_c_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_c_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(frame_spliter_c_sptr self, int priority) -> int"""
        return _dslwp_swig.frame_spliter_c_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(frame_spliter_c_sptr self) -> std::string"""
        return _dslwp_swig.frame_spliter_c_sptr_name(self)


    def symbol_name(self):
        """symbol_name(frame_spliter_c_sptr self) -> std::string"""
        return _dslwp_swig.frame_spliter_c_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(frame_spliter_c_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.frame_spliter_c_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(frame_spliter_c_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.frame_spliter_c_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(frame_spliter_c_sptr self) -> long"""
        return _dslwp_swig.frame_spliter_c_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(frame_spliter_c_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.frame_spliter_c_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(frame_spliter_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.frame_spliter_c_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(frame_spliter_c_sptr self) -> std::string"""
        return _dslwp_swig.frame_spliter_c_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(frame_spliter_c_sptr self, std::string name)"""
        return _dslwp_swig.frame_spliter_c_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(frame_spliter_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.frame_spliter_c_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(frame_spliter_c_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.frame_spliter_c_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(frame_spliter_c_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.frame_spliter_c_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(frame_spliter_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.frame_spliter_c_sptr_message_subscribers(self, which_port)

frame_spliter_c_sptr_swigregister = _dslwp_swig.frame_spliter_c_sptr_swigregister
frame_spliter_c_sptr_swigregister(frame_spliter_c_sptr)


frame_spliter_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_spliter_c = frame_spliter_c.make;

class ccsds_turbo_encode(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::ccsds_turbo_encode.

    To avoid accidental use of raw pointers, dslwp::ccsds_turbo_encode's constructor is in a private implementation class. dslwp::ccsds_turbo_encode::make is the public interface for creating new instances.

    Args:
        base : 
        octets : 
        code_type : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(base=223, octets=1, code_type=1):
        """
        make(int base=223, int octets=1, int code_type=1) -> ccsds_turbo_encode_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::ccsds_turbo_encode.

        To avoid accidental use of raw pointers, dslwp::ccsds_turbo_encode's constructor is in a private implementation class. dslwp::ccsds_turbo_encode::make is the public interface for creating new instances.

        Args:
            base : 
            octets : 
            code_type : 
        """
        return _dslwp_swig.ccsds_turbo_encode_make(base, octets, code_type)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_ccsds_turbo_encode
    __del__ = lambda self: None
ccsds_turbo_encode_swigregister = _dslwp_swig.ccsds_turbo_encode_swigregister
ccsds_turbo_encode_swigregister(ccsds_turbo_encode)

def ccsds_turbo_encode_make(base=223, octets=1, code_type=1):
    """
    ccsds_turbo_encode_make(int base=223, int octets=1, int code_type=1) -> ccsds_turbo_encode_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::ccsds_turbo_encode.

    To avoid accidental use of raw pointers, dslwp::ccsds_turbo_encode's constructor is in a private implementation class. dslwp::ccsds_turbo_encode::make is the public interface for creating new instances.

    Args:
        base : 
        octets : 
        code_type : 
    """
    return _dslwp_swig.ccsds_turbo_encode_make(base, octets, code_type)

class ccsds_turbo_encode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::ccsds_turbo_encode)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::ccsds_turbo_encode)> self) -> ccsds_turbo_encode_sptr
        __init__(boost::shared_ptr<(gr::dslwp::ccsds_turbo_encode)> self, ccsds_turbo_encode p) -> ccsds_turbo_encode_sptr
        """
        this = _dslwp_swig.new_ccsds_turbo_encode_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ccsds_turbo_encode_sptr self) -> ccsds_turbo_encode"""
        return _dslwp_swig.ccsds_turbo_encode_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_ccsds_turbo_encode_sptr
    __del__ = lambda self: None

    def make(self, base=223, octets=1, code_type=1):
        """
        make(ccsds_turbo_encode_sptr self, int base=223, int octets=1, int code_type=1) -> ccsds_turbo_encode_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::ccsds_turbo_encode.

        To avoid accidental use of raw pointers, dslwp::ccsds_turbo_encode's constructor is in a private implementation class. dslwp::ccsds_turbo_encode::make is the public interface for creating new instances.

        Args:
            base : 
            octets : 
            code_type : 
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_make(self, base, octets, code_type)


    def history(self):
        """history(ccsds_turbo_encode_sptr self) -> unsigned int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ccsds_turbo_encode_sptr self, int which, int delay)
        declare_sample_delay(ccsds_turbo_encode_sptr self, unsigned int delay)
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ccsds_turbo_encode_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ccsds_turbo_encode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ccsds_turbo_encode_sptr self) -> double"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_relative_rate(self)


    def start(self):
        """start(ccsds_turbo_encode_sptr self) -> bool"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_start(self)


    def stop(self):
        """stop(ccsds_turbo_encode_sptr self) -> bool"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ccsds_turbo_encode_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ccsds_turbo_encode_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ccsds_turbo_encode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ccsds_turbo_encode_sptr self, int m)"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ccsds_turbo_encode_sptr self)"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ccsds_turbo_encode_sptr self) -> bool"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ccsds_turbo_encode_sptr self, int m)"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ccsds_turbo_encode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ccsds_turbo_encode_sptr self, int i) -> long"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ccsds_turbo_encode_sptr self, long max_output_buffer)
        set_max_output_buffer(ccsds_turbo_encode_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ccsds_turbo_encode_sptr self, int i) -> long"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ccsds_turbo_encode_sptr self, long min_output_buffer)
        set_min_output_buffer(ccsds_turbo_encode_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ccsds_turbo_encode_sptr self, int which) -> float
        pc_input_buffers_full(ccsds_turbo_encode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ccsds_turbo_encode_sptr self, int which) -> float
        pc_input_buffers_full_avg(ccsds_turbo_encode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ccsds_turbo_encode_sptr self, int which) -> float
        pc_input_buffers_full_var(ccsds_turbo_encode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ccsds_turbo_encode_sptr self, int which) -> float
        pc_output_buffers_full(ccsds_turbo_encode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ccsds_turbo_encode_sptr self, int which) -> float
        pc_output_buffers_full_avg(ccsds_turbo_encode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ccsds_turbo_encode_sptr self, int which) -> float
        pc_output_buffers_full_var(ccsds_turbo_encode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ccsds_turbo_encode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ccsds_turbo_encode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ccsds_turbo_encode_sptr self)"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ccsds_turbo_encode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ccsds_turbo_encode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ccsds_turbo_encode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ccsds_turbo_encode_sptr self, int priority) -> int"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ccsds_turbo_encode_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ccsds_turbo_encode_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ccsds_turbo_encode_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ccsds_turbo_encode_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ccsds_turbo_encode_sptr self) -> long"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ccsds_turbo_encode_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ccsds_turbo_encode_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ccsds_turbo_encode_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ccsds_turbo_encode_sptr self, std::string name)"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ccsds_turbo_encode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.ccsds_turbo_encode_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ccsds_turbo_encode_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ccsds_turbo_encode_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ccsds_turbo_encode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_turbo_encode_sptr_message_subscribers(self, which_port)

ccsds_turbo_encode_sptr_swigregister = _dslwp_swig.ccsds_turbo_encode_sptr_swigregister
ccsds_turbo_encode_sptr_swigregister(ccsds_turbo_encode_sptr)


ccsds_turbo_encode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ccsds_turbo_encode = ccsds_turbo_encode.make;

class ccsds_turbo_decode(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::ccsds_turbo_decode.

    To avoid accidental use of raw pointers, dslwp::ccsds_turbo_decode's constructor is in a private implementation class. dslwp::ccsds_turbo_decode::make is the public interface for creating new instances.

    Args:
        base : 
        octets : 
        code_type : 
        iterations : 
        sigma : 
        update_sigma : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(base=223, octets=1, code_type=1, iterations=2, sigma=0.707, update_sigma=1):
        """
        make(int base=223, int octets=1, int code_type=1, int iterations=2, float sigma=0.707, uint8_t update_sigma=1) -> ccsds_turbo_decode_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::ccsds_turbo_decode.

        To avoid accidental use of raw pointers, dslwp::ccsds_turbo_decode's constructor is in a private implementation class. dslwp::ccsds_turbo_decode::make is the public interface for creating new instances.

        Args:
            base : 
            octets : 
            code_type : 
            iterations : 
            sigma : 
            update_sigma : 
        """
        return _dslwp_swig.ccsds_turbo_decode_make(base, octets, code_type, iterations, sigma, update_sigma)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_ccsds_turbo_decode
    __del__ = lambda self: None
ccsds_turbo_decode_swigregister = _dslwp_swig.ccsds_turbo_decode_swigregister
ccsds_turbo_decode_swigregister(ccsds_turbo_decode)

def ccsds_turbo_decode_make(base=223, octets=1, code_type=1, iterations=2, sigma=0.707, update_sigma=1):
    """
    ccsds_turbo_decode_make(int base=223, int octets=1, int code_type=1, int iterations=2, float sigma=0.707, uint8_t update_sigma=1) -> ccsds_turbo_decode_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::ccsds_turbo_decode.

    To avoid accidental use of raw pointers, dslwp::ccsds_turbo_decode's constructor is in a private implementation class. dslwp::ccsds_turbo_decode::make is the public interface for creating new instances.

    Args:
        base : 
        octets : 
        code_type : 
        iterations : 
        sigma : 
        update_sigma : 
    """
    return _dslwp_swig.ccsds_turbo_decode_make(base, octets, code_type, iterations, sigma, update_sigma)

class ccsds_turbo_decode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::ccsds_turbo_decode)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::ccsds_turbo_decode)> self) -> ccsds_turbo_decode_sptr
        __init__(boost::shared_ptr<(gr::dslwp::ccsds_turbo_decode)> self, ccsds_turbo_decode p) -> ccsds_turbo_decode_sptr
        """
        this = _dslwp_swig.new_ccsds_turbo_decode_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ccsds_turbo_decode_sptr self) -> ccsds_turbo_decode"""
        return _dslwp_swig.ccsds_turbo_decode_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_ccsds_turbo_decode_sptr
    __del__ = lambda self: None

    def make(self, base=223, octets=1, code_type=1, iterations=2, sigma=0.707, update_sigma=1):
        """
        make(ccsds_turbo_decode_sptr self, int base=223, int octets=1, int code_type=1, int iterations=2, float sigma=0.707, uint8_t update_sigma=1) -> ccsds_turbo_decode_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::ccsds_turbo_decode.

        To avoid accidental use of raw pointers, dslwp::ccsds_turbo_decode's constructor is in a private implementation class. dslwp::ccsds_turbo_decode::make is the public interface for creating new instances.

        Args:
            base : 
            octets : 
            code_type : 
            iterations : 
            sigma : 
            update_sigma : 
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_make(self, base, octets, code_type, iterations, sigma, update_sigma)


    def history(self):
        """history(ccsds_turbo_decode_sptr self) -> unsigned int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ccsds_turbo_decode_sptr self, int which, int delay)
        declare_sample_delay(ccsds_turbo_decode_sptr self, unsigned int delay)
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ccsds_turbo_decode_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ccsds_turbo_decode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ccsds_turbo_decode_sptr self) -> double"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_relative_rate(self)


    def start(self):
        """start(ccsds_turbo_decode_sptr self) -> bool"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_start(self)


    def stop(self):
        """stop(ccsds_turbo_decode_sptr self) -> bool"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ccsds_turbo_decode_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ccsds_turbo_decode_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ccsds_turbo_decode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ccsds_turbo_decode_sptr self, int m)"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ccsds_turbo_decode_sptr self)"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ccsds_turbo_decode_sptr self) -> bool"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ccsds_turbo_decode_sptr self, int m)"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ccsds_turbo_decode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ccsds_turbo_decode_sptr self, int i) -> long"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ccsds_turbo_decode_sptr self, long max_output_buffer)
        set_max_output_buffer(ccsds_turbo_decode_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ccsds_turbo_decode_sptr self, int i) -> long"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ccsds_turbo_decode_sptr self, long min_output_buffer)
        set_min_output_buffer(ccsds_turbo_decode_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ccsds_turbo_decode_sptr self, int which) -> float
        pc_input_buffers_full(ccsds_turbo_decode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ccsds_turbo_decode_sptr self, int which) -> float
        pc_input_buffers_full_avg(ccsds_turbo_decode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ccsds_turbo_decode_sptr self, int which) -> float
        pc_input_buffers_full_var(ccsds_turbo_decode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ccsds_turbo_decode_sptr self, int which) -> float
        pc_output_buffers_full(ccsds_turbo_decode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ccsds_turbo_decode_sptr self, int which) -> float
        pc_output_buffers_full_avg(ccsds_turbo_decode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ccsds_turbo_decode_sptr self, int which) -> float
        pc_output_buffers_full_var(ccsds_turbo_decode_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ccsds_turbo_decode_sptr self) -> float"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ccsds_turbo_decode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ccsds_turbo_decode_sptr self)"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ccsds_turbo_decode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ccsds_turbo_decode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ccsds_turbo_decode_sptr self) -> int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ccsds_turbo_decode_sptr self, int priority) -> int"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ccsds_turbo_decode_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ccsds_turbo_decode_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ccsds_turbo_decode_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ccsds_turbo_decode_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ccsds_turbo_decode_sptr self) -> long"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ccsds_turbo_decode_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ccsds_turbo_decode_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ccsds_turbo_decode_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ccsds_turbo_decode_sptr self, std::string name)"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ccsds_turbo_decode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.ccsds_turbo_decode_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ccsds_turbo_decode_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ccsds_turbo_decode_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ccsds_turbo_decode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_turbo_decode_sptr_message_subscribers(self, which_port)

ccsds_turbo_decode_sptr_swigregister = _dslwp_swig.ccsds_turbo_decode_sptr_swigregister
ccsds_turbo_decode_sptr_swigregister(ccsds_turbo_decode_sptr)


ccsds_turbo_decode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ccsds_turbo_decode = ccsds_turbo_decode.make;

class attach_sync_marker(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::attach_sync_marker.

    To avoid accidental use of raw pointers, dslwp::attach_sync_marker's constructor is in a private implementation class. dslwp::attach_sync_marker::make is the public interface for creating new instances.

    Args:
        marker : 
        data_format : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(marker, data_format):
        """
        make(std::vector< uint8_t,std::allocator< uint8_t > > const & marker, int data_format) -> attach_sync_marker_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::attach_sync_marker.

        To avoid accidental use of raw pointers, dslwp::attach_sync_marker's constructor is in a private implementation class. dslwp::attach_sync_marker::make is the public interface for creating new instances.

        Args:
            marker : 
            data_format : 
        """
        return _dslwp_swig.attach_sync_marker_make(marker, data_format)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_attach_sync_marker
    __del__ = lambda self: None
attach_sync_marker_swigregister = _dslwp_swig.attach_sync_marker_swigregister
attach_sync_marker_swigregister(attach_sync_marker)

def attach_sync_marker_make(marker, data_format):
    """
    attach_sync_marker_make(std::vector< uint8_t,std::allocator< uint8_t > > const & marker, int data_format) -> attach_sync_marker_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::attach_sync_marker.

    To avoid accidental use of raw pointers, dslwp::attach_sync_marker's constructor is in a private implementation class. dslwp::attach_sync_marker::make is the public interface for creating new instances.

    Args:
        marker : 
        data_format : 
    """
    return _dslwp_swig.attach_sync_marker_make(marker, data_format)

class attach_sync_marker_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::attach_sync_marker)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::attach_sync_marker)> self) -> attach_sync_marker_sptr
        __init__(boost::shared_ptr<(gr::dslwp::attach_sync_marker)> self, attach_sync_marker p) -> attach_sync_marker_sptr
        """
        this = _dslwp_swig.new_attach_sync_marker_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(attach_sync_marker_sptr self) -> attach_sync_marker"""
        return _dslwp_swig.attach_sync_marker_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_attach_sync_marker_sptr
    __del__ = lambda self: None

    def make(self, marker, data_format):
        """
        make(attach_sync_marker_sptr self, std::vector< uint8_t,std::allocator< uint8_t > > const & marker, int data_format) -> attach_sync_marker_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::attach_sync_marker.

        To avoid accidental use of raw pointers, dslwp::attach_sync_marker's constructor is in a private implementation class. dslwp::attach_sync_marker::make is the public interface for creating new instances.

        Args:
            marker : 
            data_format : 
        """
        return _dslwp_swig.attach_sync_marker_sptr_make(self, marker, data_format)


    def history(self):
        """history(attach_sync_marker_sptr self) -> unsigned int"""
        return _dslwp_swig.attach_sync_marker_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(attach_sync_marker_sptr self, int which, int delay)
        declare_sample_delay(attach_sync_marker_sptr self, unsigned int delay)
        """
        return _dslwp_swig.attach_sync_marker_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(attach_sync_marker_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.attach_sync_marker_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(attach_sync_marker_sptr self) -> int"""
        return _dslwp_swig.attach_sync_marker_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(attach_sync_marker_sptr self) -> double"""
        return _dslwp_swig.attach_sync_marker_sptr_relative_rate(self)


    def start(self):
        """start(attach_sync_marker_sptr self) -> bool"""
        return _dslwp_swig.attach_sync_marker_sptr_start(self)


    def stop(self):
        """stop(attach_sync_marker_sptr self) -> bool"""
        return _dslwp_swig.attach_sync_marker_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(attach_sync_marker_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.attach_sync_marker_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(attach_sync_marker_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.attach_sync_marker_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(attach_sync_marker_sptr self) -> int"""
        return _dslwp_swig.attach_sync_marker_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(attach_sync_marker_sptr self, int m)"""
        return _dslwp_swig.attach_sync_marker_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(attach_sync_marker_sptr self)"""
        return _dslwp_swig.attach_sync_marker_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(attach_sync_marker_sptr self) -> bool"""
        return _dslwp_swig.attach_sync_marker_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(attach_sync_marker_sptr self, int m)"""
        return _dslwp_swig.attach_sync_marker_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(attach_sync_marker_sptr self) -> int"""
        return _dslwp_swig.attach_sync_marker_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(attach_sync_marker_sptr self, int i) -> long"""
        return _dslwp_swig.attach_sync_marker_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(attach_sync_marker_sptr self, long max_output_buffer)
        set_max_output_buffer(attach_sync_marker_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.attach_sync_marker_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(attach_sync_marker_sptr self, int i) -> long"""
        return _dslwp_swig.attach_sync_marker_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(attach_sync_marker_sptr self, long min_output_buffer)
        set_min_output_buffer(attach_sync_marker_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.attach_sync_marker_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(attach_sync_marker_sptr self, int which) -> float
        pc_input_buffers_full(attach_sync_marker_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.attach_sync_marker_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(attach_sync_marker_sptr self, int which) -> float
        pc_input_buffers_full_avg(attach_sync_marker_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.attach_sync_marker_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(attach_sync_marker_sptr self, int which) -> float
        pc_input_buffers_full_var(attach_sync_marker_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.attach_sync_marker_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(attach_sync_marker_sptr self, int which) -> float
        pc_output_buffers_full(attach_sync_marker_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.attach_sync_marker_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(attach_sync_marker_sptr self, int which) -> float
        pc_output_buffers_full_avg(attach_sync_marker_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.attach_sync_marker_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(attach_sync_marker_sptr self, int which) -> float
        pc_output_buffers_full_var(attach_sync_marker_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.attach_sync_marker_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(attach_sync_marker_sptr self) -> float"""
        return _dslwp_swig.attach_sync_marker_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(attach_sync_marker_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.attach_sync_marker_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(attach_sync_marker_sptr self)"""
        return _dslwp_swig.attach_sync_marker_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(attach_sync_marker_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.attach_sync_marker_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(attach_sync_marker_sptr self) -> int"""
        return _dslwp_swig.attach_sync_marker_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(attach_sync_marker_sptr self) -> int"""
        return _dslwp_swig.attach_sync_marker_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(attach_sync_marker_sptr self, int priority) -> int"""
        return _dslwp_swig.attach_sync_marker_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(attach_sync_marker_sptr self) -> std::string"""
        return _dslwp_swig.attach_sync_marker_sptr_name(self)


    def symbol_name(self):
        """symbol_name(attach_sync_marker_sptr self) -> std::string"""
        return _dslwp_swig.attach_sync_marker_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(attach_sync_marker_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.attach_sync_marker_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(attach_sync_marker_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.attach_sync_marker_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(attach_sync_marker_sptr self) -> long"""
        return _dslwp_swig.attach_sync_marker_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(attach_sync_marker_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.attach_sync_marker_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(attach_sync_marker_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.attach_sync_marker_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(attach_sync_marker_sptr self) -> std::string"""
        return _dslwp_swig.attach_sync_marker_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(attach_sync_marker_sptr self, std::string name)"""
        return _dslwp_swig.attach_sync_marker_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(attach_sync_marker_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.attach_sync_marker_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(attach_sync_marker_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.attach_sync_marker_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(attach_sync_marker_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.attach_sync_marker_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(attach_sync_marker_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.attach_sync_marker_sptr_message_subscribers(self, which_port)

attach_sync_marker_sptr_swigregister = _dslwp_swig.attach_sync_marker_sptr_swigregister
attach_sync_marker_sptr_swigregister(attach_sync_marker_sptr)


attach_sync_marker_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
attach_sync_marker = attach_sync_marker.make;

class ccsds_pseudo_randomizer(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::ccsds_pseudo_randomizer.

    To avoid accidental use of raw pointers, dslwp::ccsds_pseudo_randomizer's constructor is in a private implementation class. dslwp::ccsds_pseudo_randomizer::make is the public interface for creating new instances.

    Args:
        data_format : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(data_format):
        """
        make(int data_format) -> ccsds_pseudo_randomizer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::ccsds_pseudo_randomizer.

        To avoid accidental use of raw pointers, dslwp::ccsds_pseudo_randomizer's constructor is in a private implementation class. dslwp::ccsds_pseudo_randomizer::make is the public interface for creating new instances.

        Args:
            data_format : 
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_make(data_format)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_ccsds_pseudo_randomizer
    __del__ = lambda self: None
ccsds_pseudo_randomizer_swigregister = _dslwp_swig.ccsds_pseudo_randomizer_swigregister
ccsds_pseudo_randomizer_swigregister(ccsds_pseudo_randomizer)

def ccsds_pseudo_randomizer_make(data_format):
    """
    ccsds_pseudo_randomizer_make(int data_format) -> ccsds_pseudo_randomizer_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::ccsds_pseudo_randomizer.

    To avoid accidental use of raw pointers, dslwp::ccsds_pseudo_randomizer's constructor is in a private implementation class. dslwp::ccsds_pseudo_randomizer::make is the public interface for creating new instances.

    Args:
        data_format : 
    """
    return _dslwp_swig.ccsds_pseudo_randomizer_make(data_format)

class ccsds_pseudo_randomizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::ccsds_pseudo_randomizer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::ccsds_pseudo_randomizer)> self) -> ccsds_pseudo_randomizer_sptr
        __init__(boost::shared_ptr<(gr::dslwp::ccsds_pseudo_randomizer)> self, ccsds_pseudo_randomizer p) -> ccsds_pseudo_randomizer_sptr
        """
        this = _dslwp_swig.new_ccsds_pseudo_randomizer_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ccsds_pseudo_randomizer_sptr self) -> ccsds_pseudo_randomizer"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_ccsds_pseudo_randomizer_sptr
    __del__ = lambda self: None

    def make(self, data_format):
        """
        make(ccsds_pseudo_randomizer_sptr self, int data_format) -> ccsds_pseudo_randomizer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::ccsds_pseudo_randomizer.

        To avoid accidental use of raw pointers, dslwp::ccsds_pseudo_randomizer's constructor is in a private implementation class. dslwp::ccsds_pseudo_randomizer::make is the public interface for creating new instances.

        Args:
            data_format : 
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_make(self, data_format)


    def history(self):
        """history(ccsds_pseudo_randomizer_sptr self) -> unsigned int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ccsds_pseudo_randomizer_sptr self, int which, int delay)
        declare_sample_delay(ccsds_pseudo_randomizer_sptr self, unsigned int delay)
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ccsds_pseudo_randomizer_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ccsds_pseudo_randomizer_sptr self) -> int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ccsds_pseudo_randomizer_sptr self) -> double"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_relative_rate(self)


    def start(self):
        """start(ccsds_pseudo_randomizer_sptr self) -> bool"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_start(self)


    def stop(self):
        """stop(ccsds_pseudo_randomizer_sptr self) -> bool"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ccsds_pseudo_randomizer_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ccsds_pseudo_randomizer_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ccsds_pseudo_randomizer_sptr self) -> int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ccsds_pseudo_randomizer_sptr self, int m)"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ccsds_pseudo_randomizer_sptr self)"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ccsds_pseudo_randomizer_sptr self) -> bool"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ccsds_pseudo_randomizer_sptr self, int m)"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ccsds_pseudo_randomizer_sptr self) -> int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ccsds_pseudo_randomizer_sptr self, int i) -> long"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ccsds_pseudo_randomizer_sptr self, long max_output_buffer)
        set_max_output_buffer(ccsds_pseudo_randomizer_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ccsds_pseudo_randomizer_sptr self, int i) -> long"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ccsds_pseudo_randomizer_sptr self, long min_output_buffer)
        set_min_output_buffer(ccsds_pseudo_randomizer_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ccsds_pseudo_randomizer_sptr self, int which) -> float
        pc_input_buffers_full(ccsds_pseudo_randomizer_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ccsds_pseudo_randomizer_sptr self, int which) -> float
        pc_input_buffers_full_avg(ccsds_pseudo_randomizer_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ccsds_pseudo_randomizer_sptr self, int which) -> float
        pc_input_buffers_full_var(ccsds_pseudo_randomizer_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ccsds_pseudo_randomizer_sptr self, int which) -> float
        pc_output_buffers_full(ccsds_pseudo_randomizer_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ccsds_pseudo_randomizer_sptr self, int which) -> float
        pc_output_buffers_full_avg(ccsds_pseudo_randomizer_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ccsds_pseudo_randomizer_sptr self, int which) -> float
        pc_output_buffers_full_var(ccsds_pseudo_randomizer_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ccsds_pseudo_randomizer_sptr self) -> float"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ccsds_pseudo_randomizer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ccsds_pseudo_randomizer_sptr self)"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ccsds_pseudo_randomizer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ccsds_pseudo_randomizer_sptr self) -> int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ccsds_pseudo_randomizer_sptr self) -> int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ccsds_pseudo_randomizer_sptr self, int priority) -> int"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ccsds_pseudo_randomizer_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ccsds_pseudo_randomizer_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ccsds_pseudo_randomizer_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ccsds_pseudo_randomizer_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ccsds_pseudo_randomizer_sptr self) -> long"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ccsds_pseudo_randomizer_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ccsds_pseudo_randomizer_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ccsds_pseudo_randomizer_sptr self) -> std::string"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ccsds_pseudo_randomizer_sptr self, std::string name)"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ccsds_pseudo_randomizer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ccsds_pseudo_randomizer_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ccsds_pseudo_randomizer_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ccsds_pseudo_randomizer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.ccsds_pseudo_randomizer_sptr_message_subscribers(self, which_port)

ccsds_pseudo_randomizer_sptr_swigregister = _dslwp_swig.ccsds_pseudo_randomizer_sptr_swigregister
ccsds_pseudo_randomizer_sptr_swigregister(ccsds_pseudo_randomizer_sptr)


ccsds_pseudo_randomizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ccsds_pseudo_randomizer = ccsds_pseudo_randomizer.make;

class kiss_encode_pdu(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::kiss_encode_pdu.

    To avoid accidental use of raw pointers, dslwp::kiss_encode_pdu's constructor is in a private implementation class. dslwp::kiss_encode_pdu::make is the public interface for creating new instances.

    Args:
        const_length : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(const_length):
        """
        make(int const_length) -> kiss_encode_pdu_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::kiss_encode_pdu.

        To avoid accidental use of raw pointers, dslwp::kiss_encode_pdu's constructor is in a private implementation class. dslwp::kiss_encode_pdu::make is the public interface for creating new instances.

        Args:
            const_length : 
        """
        return _dslwp_swig.kiss_encode_pdu_make(const_length)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_kiss_encode_pdu
    __del__ = lambda self: None
kiss_encode_pdu_swigregister = _dslwp_swig.kiss_encode_pdu_swigregister
kiss_encode_pdu_swigregister(kiss_encode_pdu)

def kiss_encode_pdu_make(const_length):
    """
    kiss_encode_pdu_make(int const_length) -> kiss_encode_pdu_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::kiss_encode_pdu.

    To avoid accidental use of raw pointers, dslwp::kiss_encode_pdu's constructor is in a private implementation class. dslwp::kiss_encode_pdu::make is the public interface for creating new instances.

    Args:
        const_length : 
    """
    return _dslwp_swig.kiss_encode_pdu_make(const_length)

class kiss_encode_pdu_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::kiss_encode_pdu)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::kiss_encode_pdu)> self) -> kiss_encode_pdu_sptr
        __init__(boost::shared_ptr<(gr::dslwp::kiss_encode_pdu)> self, kiss_encode_pdu p) -> kiss_encode_pdu_sptr
        """
        this = _dslwp_swig.new_kiss_encode_pdu_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(kiss_encode_pdu_sptr self) -> kiss_encode_pdu"""
        return _dslwp_swig.kiss_encode_pdu_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_kiss_encode_pdu_sptr
    __del__ = lambda self: None

    def make(self, const_length):
        """
        make(kiss_encode_pdu_sptr self, int const_length) -> kiss_encode_pdu_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::kiss_encode_pdu.

        To avoid accidental use of raw pointers, dslwp::kiss_encode_pdu's constructor is in a private implementation class. dslwp::kiss_encode_pdu::make is the public interface for creating new instances.

        Args:
            const_length : 
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_make(self, const_length)


    def history(self):
        """history(kiss_encode_pdu_sptr self) -> unsigned int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(kiss_encode_pdu_sptr self, int which, int delay)
        declare_sample_delay(kiss_encode_pdu_sptr self, unsigned int delay)
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(kiss_encode_pdu_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(kiss_encode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(kiss_encode_pdu_sptr self) -> double"""
        return _dslwp_swig.kiss_encode_pdu_sptr_relative_rate(self)


    def start(self):
        """start(kiss_encode_pdu_sptr self) -> bool"""
        return _dslwp_swig.kiss_encode_pdu_sptr_start(self)


    def stop(self):
        """stop(kiss_encode_pdu_sptr self) -> bool"""
        return _dslwp_swig.kiss_encode_pdu_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(kiss_encode_pdu_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.kiss_encode_pdu_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(kiss_encode_pdu_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.kiss_encode_pdu_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(kiss_encode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(kiss_encode_pdu_sptr self, int m)"""
        return _dslwp_swig.kiss_encode_pdu_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(kiss_encode_pdu_sptr self)"""
        return _dslwp_swig.kiss_encode_pdu_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(kiss_encode_pdu_sptr self) -> bool"""
        return _dslwp_swig.kiss_encode_pdu_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(kiss_encode_pdu_sptr self, int m)"""
        return _dslwp_swig.kiss_encode_pdu_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(kiss_encode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(kiss_encode_pdu_sptr self, int i) -> long"""
        return _dslwp_swig.kiss_encode_pdu_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(kiss_encode_pdu_sptr self, long max_output_buffer)
        set_max_output_buffer(kiss_encode_pdu_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(kiss_encode_pdu_sptr self, int i) -> long"""
        return _dslwp_swig.kiss_encode_pdu_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(kiss_encode_pdu_sptr self, long min_output_buffer)
        set_min_output_buffer(kiss_encode_pdu_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(kiss_encode_pdu_sptr self, int which) -> float
        pc_input_buffers_full(kiss_encode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(kiss_encode_pdu_sptr self, int which) -> float
        pc_input_buffers_full_avg(kiss_encode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(kiss_encode_pdu_sptr self, int which) -> float
        pc_input_buffers_full_var(kiss_encode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(kiss_encode_pdu_sptr self, int which) -> float
        pc_output_buffers_full(kiss_encode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(kiss_encode_pdu_sptr self, int which) -> float
        pc_output_buffers_full_avg(kiss_encode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(kiss_encode_pdu_sptr self, int which) -> float
        pc_output_buffers_full_var(kiss_encode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(kiss_encode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_encode_pdu_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(kiss_encode_pdu_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.kiss_encode_pdu_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(kiss_encode_pdu_sptr self)"""
        return _dslwp_swig.kiss_encode_pdu_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(kiss_encode_pdu_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.kiss_encode_pdu_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(kiss_encode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(kiss_encode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(kiss_encode_pdu_sptr self, int priority) -> int"""
        return _dslwp_swig.kiss_encode_pdu_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(kiss_encode_pdu_sptr self) -> std::string"""
        return _dslwp_swig.kiss_encode_pdu_sptr_name(self)


    def symbol_name(self):
        """symbol_name(kiss_encode_pdu_sptr self) -> std::string"""
        return _dslwp_swig.kiss_encode_pdu_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(kiss_encode_pdu_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.kiss_encode_pdu_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(kiss_encode_pdu_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.kiss_encode_pdu_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(kiss_encode_pdu_sptr self) -> long"""
        return _dslwp_swig.kiss_encode_pdu_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(kiss_encode_pdu_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.kiss_encode_pdu_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(kiss_encode_pdu_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.kiss_encode_pdu_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(kiss_encode_pdu_sptr self) -> std::string"""
        return _dslwp_swig.kiss_encode_pdu_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(kiss_encode_pdu_sptr self, std::string name)"""
        return _dslwp_swig.kiss_encode_pdu_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(kiss_encode_pdu_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.kiss_encode_pdu_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(kiss_encode_pdu_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.kiss_encode_pdu_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(kiss_encode_pdu_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.kiss_encode_pdu_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(kiss_encode_pdu_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.kiss_encode_pdu_sptr_message_subscribers(self, which_port)

kiss_encode_pdu_sptr_swigregister = _dslwp_swig.kiss_encode_pdu_sptr_swigregister
kiss_encode_pdu_sptr_swigregister(kiss_encode_pdu_sptr)


kiss_encode_pdu_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
kiss_encode_pdu = kiss_encode_pdu.make;

class kiss_decode_pdu(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::kiss_decode_pdu.

    To avoid accidental use of raw pointers, dslwp::kiss_decode_pdu's constructor is in a private implementation class. dslwp::kiss_decode_pdu::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> kiss_decode_pdu_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::kiss_decode_pdu.

        To avoid accidental use of raw pointers, dslwp::kiss_decode_pdu's constructor is in a private implementation class. dslwp::kiss_decode_pdu::make is the public interface for creating new instances.
        """
        return _dslwp_swig.kiss_decode_pdu_make()

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_kiss_decode_pdu
    __del__ = lambda self: None
kiss_decode_pdu_swigregister = _dslwp_swig.kiss_decode_pdu_swigregister
kiss_decode_pdu_swigregister(kiss_decode_pdu)

def kiss_decode_pdu_make():
    """
    kiss_decode_pdu_make() -> kiss_decode_pdu_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::kiss_decode_pdu.

    To avoid accidental use of raw pointers, dslwp::kiss_decode_pdu's constructor is in a private implementation class. dslwp::kiss_decode_pdu::make is the public interface for creating new instances.
    """
    return _dslwp_swig.kiss_decode_pdu_make()

class kiss_decode_pdu_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::kiss_decode_pdu)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::kiss_decode_pdu)> self) -> kiss_decode_pdu_sptr
        __init__(boost::shared_ptr<(gr::dslwp::kiss_decode_pdu)> self, kiss_decode_pdu p) -> kiss_decode_pdu_sptr
        """
        this = _dslwp_swig.new_kiss_decode_pdu_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(kiss_decode_pdu_sptr self) -> kiss_decode_pdu"""
        return _dslwp_swig.kiss_decode_pdu_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_kiss_decode_pdu_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(kiss_decode_pdu_sptr self) -> kiss_decode_pdu_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::kiss_decode_pdu.

        To avoid accidental use of raw pointers, dslwp::kiss_decode_pdu's constructor is in a private implementation class. dslwp::kiss_decode_pdu::make is the public interface for creating new instances.
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_make(self)


    def history(self):
        """history(kiss_decode_pdu_sptr self) -> unsigned int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(kiss_decode_pdu_sptr self, int which, int delay)
        declare_sample_delay(kiss_decode_pdu_sptr self, unsigned int delay)
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(kiss_decode_pdu_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(kiss_decode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(kiss_decode_pdu_sptr self) -> double"""
        return _dslwp_swig.kiss_decode_pdu_sptr_relative_rate(self)


    def start(self):
        """start(kiss_decode_pdu_sptr self) -> bool"""
        return _dslwp_swig.kiss_decode_pdu_sptr_start(self)


    def stop(self):
        """stop(kiss_decode_pdu_sptr self) -> bool"""
        return _dslwp_swig.kiss_decode_pdu_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(kiss_decode_pdu_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.kiss_decode_pdu_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(kiss_decode_pdu_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.kiss_decode_pdu_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(kiss_decode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(kiss_decode_pdu_sptr self, int m)"""
        return _dslwp_swig.kiss_decode_pdu_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(kiss_decode_pdu_sptr self)"""
        return _dslwp_swig.kiss_decode_pdu_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(kiss_decode_pdu_sptr self) -> bool"""
        return _dslwp_swig.kiss_decode_pdu_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(kiss_decode_pdu_sptr self, int m)"""
        return _dslwp_swig.kiss_decode_pdu_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(kiss_decode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(kiss_decode_pdu_sptr self, int i) -> long"""
        return _dslwp_swig.kiss_decode_pdu_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(kiss_decode_pdu_sptr self, long max_output_buffer)
        set_max_output_buffer(kiss_decode_pdu_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(kiss_decode_pdu_sptr self, int i) -> long"""
        return _dslwp_swig.kiss_decode_pdu_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(kiss_decode_pdu_sptr self, long min_output_buffer)
        set_min_output_buffer(kiss_decode_pdu_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(kiss_decode_pdu_sptr self, int which) -> float
        pc_input_buffers_full(kiss_decode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(kiss_decode_pdu_sptr self, int which) -> float
        pc_input_buffers_full_avg(kiss_decode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(kiss_decode_pdu_sptr self, int which) -> float
        pc_input_buffers_full_var(kiss_decode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(kiss_decode_pdu_sptr self, int which) -> float
        pc_output_buffers_full(kiss_decode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(kiss_decode_pdu_sptr self, int which) -> float
        pc_output_buffers_full_avg(kiss_decode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(kiss_decode_pdu_sptr self, int which) -> float
        pc_output_buffers_full_var(kiss_decode_pdu_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(kiss_decode_pdu_sptr self) -> float"""
        return _dslwp_swig.kiss_decode_pdu_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(kiss_decode_pdu_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.kiss_decode_pdu_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(kiss_decode_pdu_sptr self)"""
        return _dslwp_swig.kiss_decode_pdu_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(kiss_decode_pdu_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.kiss_decode_pdu_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(kiss_decode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(kiss_decode_pdu_sptr self) -> int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(kiss_decode_pdu_sptr self, int priority) -> int"""
        return _dslwp_swig.kiss_decode_pdu_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(kiss_decode_pdu_sptr self) -> std::string"""
        return _dslwp_swig.kiss_decode_pdu_sptr_name(self)


    def symbol_name(self):
        """symbol_name(kiss_decode_pdu_sptr self) -> std::string"""
        return _dslwp_swig.kiss_decode_pdu_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(kiss_decode_pdu_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.kiss_decode_pdu_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(kiss_decode_pdu_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.kiss_decode_pdu_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(kiss_decode_pdu_sptr self) -> long"""
        return _dslwp_swig.kiss_decode_pdu_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(kiss_decode_pdu_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.kiss_decode_pdu_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(kiss_decode_pdu_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.kiss_decode_pdu_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(kiss_decode_pdu_sptr self) -> std::string"""
        return _dslwp_swig.kiss_decode_pdu_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(kiss_decode_pdu_sptr self, std::string name)"""
        return _dslwp_swig.kiss_decode_pdu_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(kiss_decode_pdu_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.kiss_decode_pdu_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(kiss_decode_pdu_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.kiss_decode_pdu_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(kiss_decode_pdu_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.kiss_decode_pdu_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(kiss_decode_pdu_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.kiss_decode_pdu_sptr_message_subscribers(self, which_port)

kiss_decode_pdu_sptr_swigregister = _dslwp_swig.kiss_decode_pdu_sptr_swigregister
kiss_decode_pdu_sptr_swigregister(kiss_decode_pdu_sptr)


kiss_decode_pdu_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
kiss_decode_pdu = kiss_decode_pdu.make;

class fec_encode_b(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::fec_encode_b.

    To avoid accidental use of raw pointers, dslwp::fec_encode_b's constructor is in a private implementation class. dslwp::fec_encode_b::make is the public interface for creating new instances.

    Args:
        frame_len : 
        preamble_len : 
        trailer_len : 
        continous : 
        padding_zero : 
        using_m : 
        using_convolutional_code : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_len, preamble_len, trailer_len, continous, padding_zero, using_m, using_convolutional_code):
        """
        make(int frame_len, int preamble_len, int trailer_len, bool continous, bool padding_zero, bool using_m, uint8_t using_convolutional_code) -> fec_encode_b_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::fec_encode_b.

        To avoid accidental use of raw pointers, dslwp::fec_encode_b's constructor is in a private implementation class. dslwp::fec_encode_b::make is the public interface for creating new instances.

        Args:
            frame_len : 
            preamble_len : 
            trailer_len : 
            continous : 
            padding_zero : 
            using_m : 
            using_convolutional_code : 
        """
        return _dslwp_swig.fec_encode_b_make(frame_len, preamble_len, trailer_len, continous, padding_zero, using_m, using_convolutional_code)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_fec_encode_b
    __del__ = lambda self: None
fec_encode_b_swigregister = _dslwp_swig.fec_encode_b_swigregister
fec_encode_b_swigregister(fec_encode_b)

def fec_encode_b_make(frame_len, preamble_len, trailer_len, continous, padding_zero, using_m, using_convolutional_code):
    """
    fec_encode_b_make(int frame_len, int preamble_len, int trailer_len, bool continous, bool padding_zero, bool using_m, uint8_t using_convolutional_code) -> fec_encode_b_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::fec_encode_b.

    To avoid accidental use of raw pointers, dslwp::fec_encode_b's constructor is in a private implementation class. dslwp::fec_encode_b::make is the public interface for creating new instances.

    Args:
        frame_len : 
        preamble_len : 
        trailer_len : 
        continous : 
        padding_zero : 
        using_m : 
        using_convolutional_code : 
    """
    return _dslwp_swig.fec_encode_b_make(frame_len, preamble_len, trailer_len, continous, padding_zero, using_m, using_convolutional_code)

class fec_encode_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::fec_encode_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::fec_encode_b)> self) -> fec_encode_b_sptr
        __init__(boost::shared_ptr<(gr::dslwp::fec_encode_b)> self, fec_encode_b p) -> fec_encode_b_sptr
        """
        this = _dslwp_swig.new_fec_encode_b_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fec_encode_b_sptr self) -> fec_encode_b"""
        return _dslwp_swig.fec_encode_b_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_fec_encode_b_sptr
    __del__ = lambda self: None

    def make(self, frame_len, preamble_len, trailer_len, continous, padding_zero, using_m, using_convolutional_code):
        """
        make(fec_encode_b_sptr self, int frame_len, int preamble_len, int trailer_len, bool continous, bool padding_zero, bool using_m, uint8_t using_convolutional_code) -> fec_encode_b_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::fec_encode_b.

        To avoid accidental use of raw pointers, dslwp::fec_encode_b's constructor is in a private implementation class. dslwp::fec_encode_b::make is the public interface for creating new instances.

        Args:
            frame_len : 
            preamble_len : 
            trailer_len : 
            continous : 
            padding_zero : 
            using_m : 
            using_convolutional_code : 
        """
        return _dslwp_swig.fec_encode_b_sptr_make(self, frame_len, preamble_len, trailer_len, continous, padding_zero, using_m, using_convolutional_code)


    def history(self):
        """history(fec_encode_b_sptr self) -> unsigned int"""
        return _dslwp_swig.fec_encode_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fec_encode_b_sptr self, int which, int delay)
        declare_sample_delay(fec_encode_b_sptr self, unsigned int delay)
        """
        return _dslwp_swig.fec_encode_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fec_encode_b_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.fec_encode_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fec_encode_b_sptr self) -> int"""
        return _dslwp_swig.fec_encode_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fec_encode_b_sptr self) -> double"""
        return _dslwp_swig.fec_encode_b_sptr_relative_rate(self)


    def start(self):
        """start(fec_encode_b_sptr self) -> bool"""
        return _dslwp_swig.fec_encode_b_sptr_start(self)


    def stop(self):
        """stop(fec_encode_b_sptr self) -> bool"""
        return _dslwp_swig.fec_encode_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fec_encode_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.fec_encode_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fec_encode_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.fec_encode_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fec_encode_b_sptr self) -> int"""
        return _dslwp_swig.fec_encode_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fec_encode_b_sptr self, int m)"""
        return _dslwp_swig.fec_encode_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fec_encode_b_sptr self)"""
        return _dslwp_swig.fec_encode_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fec_encode_b_sptr self) -> bool"""
        return _dslwp_swig.fec_encode_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fec_encode_b_sptr self, int m)"""
        return _dslwp_swig.fec_encode_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fec_encode_b_sptr self) -> int"""
        return _dslwp_swig.fec_encode_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fec_encode_b_sptr self, int i) -> long"""
        return _dslwp_swig.fec_encode_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fec_encode_b_sptr self, long max_output_buffer)
        set_max_output_buffer(fec_encode_b_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.fec_encode_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fec_encode_b_sptr self, int i) -> long"""
        return _dslwp_swig.fec_encode_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fec_encode_b_sptr self, long min_output_buffer)
        set_min_output_buffer(fec_encode_b_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.fec_encode_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fec_encode_b_sptr self, int which) -> float
        pc_input_buffers_full(fec_encode_b_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fec_encode_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fec_encode_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(fec_encode_b_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fec_encode_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fec_encode_b_sptr self, int which) -> float
        pc_input_buffers_full_var(fec_encode_b_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fec_encode_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fec_encode_b_sptr self, int which) -> float
        pc_output_buffers_full(fec_encode_b_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fec_encode_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fec_encode_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(fec_encode_b_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fec_encode_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fec_encode_b_sptr self, int which) -> float
        pc_output_buffers_full_var(fec_encode_b_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.fec_encode_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fec_encode_b_sptr self) -> float"""
        return _dslwp_swig.fec_encode_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fec_encode_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.fec_encode_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fec_encode_b_sptr self)"""
        return _dslwp_swig.fec_encode_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fec_encode_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.fec_encode_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fec_encode_b_sptr self) -> int"""
        return _dslwp_swig.fec_encode_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fec_encode_b_sptr self) -> int"""
        return _dslwp_swig.fec_encode_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fec_encode_b_sptr self, int priority) -> int"""
        return _dslwp_swig.fec_encode_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fec_encode_b_sptr self) -> std::string"""
        return _dslwp_swig.fec_encode_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fec_encode_b_sptr self) -> std::string"""
        return _dslwp_swig.fec_encode_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fec_encode_b_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.fec_encode_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fec_encode_b_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.fec_encode_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fec_encode_b_sptr self) -> long"""
        return _dslwp_swig.fec_encode_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fec_encode_b_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.fec_encode_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fec_encode_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.fec_encode_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fec_encode_b_sptr self) -> std::string"""
        return _dslwp_swig.fec_encode_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fec_encode_b_sptr self, std::string name)"""
        return _dslwp_swig.fec_encode_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fec_encode_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.fec_encode_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fec_encode_b_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.fec_encode_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fec_encode_b_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.fec_encode_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fec_encode_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.fec_encode_b_sptr_message_subscribers(self, which_port)

fec_encode_b_sptr_swigregister = _dslwp_swig.fec_encode_b_sptr_swigregister
fec_encode_b_sptr_swigregister(fec_encode_b_sptr)


fec_encode_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fec_encode_b = fec_encode_b.make;

class differential_phase_detection_1bit_cf(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::differential_phase_detection_1bit_cf.

    To avoid accidental use of raw pointers, dslwp::differential_phase_detection_1bit_cf's constructor is in a private implementation class. dslwp::differential_phase_detection_1bit_cf::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        delay : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(samples_per_symbol, taps, opt_point, delay):
        """
        make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int delay) -> differential_phase_detection_1bit_cf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::differential_phase_detection_1bit_cf.

        To avoid accidental use of raw pointers, dslwp::differential_phase_detection_1bit_cf's constructor is in a private implementation class. dslwp::differential_phase_detection_1bit_cf::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            delay : 
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_make(samples_per_symbol, taps, opt_point, delay)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_differential_phase_detection_1bit_cf
    __del__ = lambda self: None
differential_phase_detection_1bit_cf_swigregister = _dslwp_swig.differential_phase_detection_1bit_cf_swigregister
differential_phase_detection_1bit_cf_swigregister(differential_phase_detection_1bit_cf)

def differential_phase_detection_1bit_cf_make(samples_per_symbol, taps, opt_point, delay):
    """
    differential_phase_detection_1bit_cf_make(int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int delay) -> differential_phase_detection_1bit_cf_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::differential_phase_detection_1bit_cf.

    To avoid accidental use of raw pointers, dslwp::differential_phase_detection_1bit_cf's constructor is in a private implementation class. dslwp::differential_phase_detection_1bit_cf::make is the public interface for creating new instances.

    Args:
        samples_per_symbol : 
        taps : 
        opt_point : 
        delay : 
    """
    return _dslwp_swig.differential_phase_detection_1bit_cf_make(samples_per_symbol, taps, opt_point, delay)

class differential_phase_detection_1bit_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::differential_phase_detection_1bit_cf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::differential_phase_detection_1bit_cf)> self) -> differential_phase_detection_1bit_cf_sptr
        __init__(boost::shared_ptr<(gr::dslwp::differential_phase_detection_1bit_cf)> self, differential_phase_detection_1bit_cf p) -> differential_phase_detection_1bit_cf_sptr
        """
        this = _dslwp_swig.new_differential_phase_detection_1bit_cf_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(differential_phase_detection_1bit_cf_sptr self) -> differential_phase_detection_1bit_cf"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_differential_phase_detection_1bit_cf_sptr
    __del__ = lambda self: None

    def make(self, samples_per_symbol, taps, opt_point, delay):
        """
        make(differential_phase_detection_1bit_cf_sptr self, int samples_per_symbol, pmt_vector_cfloat taps, int opt_point, int delay) -> differential_phase_detection_1bit_cf_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::differential_phase_detection_1bit_cf.

        To avoid accidental use of raw pointers, dslwp::differential_phase_detection_1bit_cf's constructor is in a private implementation class. dslwp::differential_phase_detection_1bit_cf::make is the public interface for creating new instances.

        Args:
            samples_per_symbol : 
            taps : 
            opt_point : 
            delay : 
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_make(self, samples_per_symbol, taps, opt_point, delay)


    def history(self):
        """history(differential_phase_detection_1bit_cf_sptr self) -> unsigned int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(differential_phase_detection_1bit_cf_sptr self, int which, int delay)
        declare_sample_delay(differential_phase_detection_1bit_cf_sptr self, unsigned int delay)
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(differential_phase_detection_1bit_cf_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(differential_phase_detection_1bit_cf_sptr self) -> int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(differential_phase_detection_1bit_cf_sptr self) -> double"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_relative_rate(self)


    def start(self):
        """start(differential_phase_detection_1bit_cf_sptr self) -> bool"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_start(self)


    def stop(self):
        """stop(differential_phase_detection_1bit_cf_sptr self) -> bool"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(differential_phase_detection_1bit_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(differential_phase_detection_1bit_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(differential_phase_detection_1bit_cf_sptr self) -> int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(differential_phase_detection_1bit_cf_sptr self, int m)"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(differential_phase_detection_1bit_cf_sptr self)"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(differential_phase_detection_1bit_cf_sptr self) -> bool"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(differential_phase_detection_1bit_cf_sptr self, int m)"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(differential_phase_detection_1bit_cf_sptr self) -> int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(differential_phase_detection_1bit_cf_sptr self, int i) -> long"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(differential_phase_detection_1bit_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(differential_phase_detection_1bit_cf_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(differential_phase_detection_1bit_cf_sptr self, int i) -> long"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(differential_phase_detection_1bit_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(differential_phase_detection_1bit_cf_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(differential_phase_detection_1bit_cf_sptr self, int which) -> float
        pc_input_buffers_full(differential_phase_detection_1bit_cf_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(differential_phase_detection_1bit_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(differential_phase_detection_1bit_cf_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(differential_phase_detection_1bit_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(differential_phase_detection_1bit_cf_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(differential_phase_detection_1bit_cf_sptr self, int which) -> float
        pc_output_buffers_full(differential_phase_detection_1bit_cf_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(differential_phase_detection_1bit_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(differential_phase_detection_1bit_cf_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(differential_phase_detection_1bit_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(differential_phase_detection_1bit_cf_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(differential_phase_detection_1bit_cf_sptr self) -> float"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(differential_phase_detection_1bit_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(differential_phase_detection_1bit_cf_sptr self)"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(differential_phase_detection_1bit_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(differential_phase_detection_1bit_cf_sptr self) -> int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(differential_phase_detection_1bit_cf_sptr self) -> int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(differential_phase_detection_1bit_cf_sptr self, int priority) -> int"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(differential_phase_detection_1bit_cf_sptr self) -> std::string"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(differential_phase_detection_1bit_cf_sptr self) -> std::string"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(differential_phase_detection_1bit_cf_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(differential_phase_detection_1bit_cf_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(differential_phase_detection_1bit_cf_sptr self) -> long"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(differential_phase_detection_1bit_cf_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(differential_phase_detection_1bit_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(differential_phase_detection_1bit_cf_sptr self) -> std::string"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(differential_phase_detection_1bit_cf_sptr self, std::string name)"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(differential_phase_detection_1bit_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(differential_phase_detection_1bit_cf_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(differential_phase_detection_1bit_cf_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(differential_phase_detection_1bit_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.differential_phase_detection_1bit_cf_sptr_message_subscribers(self, which_port)

differential_phase_detection_1bit_cf_sptr_swigregister = _dslwp_swig.differential_phase_detection_1bit_cf_sptr_swigregister
differential_phase_detection_1bit_cf_sptr_swigregister(differential_phase_detection_1bit_cf_sptr)


differential_phase_detection_1bit_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
differential_phase_detection_1bit_cf = differential_phase_detection_1bit_cf.make;

class frame_spliter_f(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::frame_spliter_f.

    To avoid accidental use of raw pointers, dslwp::frame_spliter_f's constructor is in a private implementation class. dslwp::frame_spliter_f::make is the public interface for creating new instances.

    Args:
        key : 
        frame_length : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(key, frame_length):
        """
        make(std::string const & key, int frame_length) -> frame_spliter_f_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::frame_spliter_f.

        To avoid accidental use of raw pointers, dslwp::frame_spliter_f's constructor is in a private implementation class. dslwp::frame_spliter_f::make is the public interface for creating new instances.

        Args:
            key : 
            frame_length : 
        """
        return _dslwp_swig.frame_spliter_f_make(key, frame_length)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_frame_spliter_f
    __del__ = lambda self: None
frame_spliter_f_swigregister = _dslwp_swig.frame_spliter_f_swigregister
frame_spliter_f_swigregister(frame_spliter_f)

def frame_spliter_f_make(key, frame_length):
    """
    frame_spliter_f_make(std::string const & key, int frame_length) -> frame_spliter_f_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::frame_spliter_f.

    To avoid accidental use of raw pointers, dslwp::frame_spliter_f's constructor is in a private implementation class. dslwp::frame_spliter_f::make is the public interface for creating new instances.

    Args:
        key : 
        frame_length : 
    """
    return _dslwp_swig.frame_spliter_f_make(key, frame_length)

class frame_spliter_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::frame_spliter_f)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::frame_spliter_f)> self) -> frame_spliter_f_sptr
        __init__(boost::shared_ptr<(gr::dslwp::frame_spliter_f)> self, frame_spliter_f p) -> frame_spliter_f_sptr
        """
        this = _dslwp_swig.new_frame_spliter_f_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(frame_spliter_f_sptr self) -> frame_spliter_f"""
        return _dslwp_swig.frame_spliter_f_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_frame_spliter_f_sptr
    __del__ = lambda self: None

    def make(self, key, frame_length):
        """
        make(frame_spliter_f_sptr self, std::string const & key, int frame_length) -> frame_spliter_f_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::frame_spliter_f.

        To avoid accidental use of raw pointers, dslwp::frame_spliter_f's constructor is in a private implementation class. dslwp::frame_spliter_f::make is the public interface for creating new instances.

        Args:
            key : 
            frame_length : 
        """
        return _dslwp_swig.frame_spliter_f_sptr_make(self, key, frame_length)


    def history(self):
        """history(frame_spliter_f_sptr self) -> unsigned int"""
        return _dslwp_swig.frame_spliter_f_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(frame_spliter_f_sptr self, int which, int delay)
        declare_sample_delay(frame_spliter_f_sptr self, unsigned int delay)
        """
        return _dslwp_swig.frame_spliter_f_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(frame_spliter_f_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.frame_spliter_f_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(frame_spliter_f_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_f_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(frame_spliter_f_sptr self) -> double"""
        return _dslwp_swig.frame_spliter_f_sptr_relative_rate(self)


    def start(self):
        """start(frame_spliter_f_sptr self) -> bool"""
        return _dslwp_swig.frame_spliter_f_sptr_start(self)


    def stop(self):
        """stop(frame_spliter_f_sptr self) -> bool"""
        return _dslwp_swig.frame_spliter_f_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(frame_spliter_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.frame_spliter_f_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(frame_spliter_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.frame_spliter_f_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(frame_spliter_f_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_f_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(frame_spliter_f_sptr self, int m)"""
        return _dslwp_swig.frame_spliter_f_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(frame_spliter_f_sptr self)"""
        return _dslwp_swig.frame_spliter_f_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(frame_spliter_f_sptr self) -> bool"""
        return _dslwp_swig.frame_spliter_f_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(frame_spliter_f_sptr self, int m)"""
        return _dslwp_swig.frame_spliter_f_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(frame_spliter_f_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_f_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(frame_spliter_f_sptr self, int i) -> long"""
        return _dslwp_swig.frame_spliter_f_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(frame_spliter_f_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_spliter_f_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.frame_spliter_f_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(frame_spliter_f_sptr self, int i) -> long"""
        return _dslwp_swig.frame_spliter_f_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(frame_spliter_f_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_spliter_f_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.frame_spliter_f_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(frame_spliter_f_sptr self, int which) -> float
        pc_input_buffers_full(frame_spliter_f_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_f_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(frame_spliter_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_spliter_f_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_f_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(frame_spliter_f_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_spliter_f_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_f_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(frame_spliter_f_sptr self, int which) -> float
        pc_output_buffers_full(frame_spliter_f_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_f_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(frame_spliter_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_spliter_f_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_f_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(frame_spliter_f_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_spliter_f_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.frame_spliter_f_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(frame_spliter_f_sptr self) -> float"""
        return _dslwp_swig.frame_spliter_f_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(frame_spliter_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.frame_spliter_f_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(frame_spliter_f_sptr self)"""
        return _dslwp_swig.frame_spliter_f_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(frame_spliter_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.frame_spliter_f_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(frame_spliter_f_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_f_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(frame_spliter_f_sptr self) -> int"""
        return _dslwp_swig.frame_spliter_f_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(frame_spliter_f_sptr self, int priority) -> int"""
        return _dslwp_swig.frame_spliter_f_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(frame_spliter_f_sptr self) -> std::string"""
        return _dslwp_swig.frame_spliter_f_sptr_name(self)


    def symbol_name(self):
        """symbol_name(frame_spliter_f_sptr self) -> std::string"""
        return _dslwp_swig.frame_spliter_f_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(frame_spliter_f_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.frame_spliter_f_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(frame_spliter_f_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.frame_spliter_f_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(frame_spliter_f_sptr self) -> long"""
        return _dslwp_swig.frame_spliter_f_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(frame_spliter_f_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.frame_spliter_f_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(frame_spliter_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.frame_spliter_f_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(frame_spliter_f_sptr self) -> std::string"""
        return _dslwp_swig.frame_spliter_f_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(frame_spliter_f_sptr self, std::string name)"""
        return _dslwp_swig.frame_spliter_f_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(frame_spliter_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.frame_spliter_f_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(frame_spliter_f_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.frame_spliter_f_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(frame_spliter_f_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.frame_spliter_f_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(frame_spliter_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.frame_spliter_f_sptr_message_subscribers(self, which_port)

frame_spliter_f_sptr_swigregister = _dslwp_swig.frame_spliter_f_sptr_swigregister
frame_spliter_f_sptr_swigregister(frame_spliter_f_sptr)


frame_spliter_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_spliter_f = frame_spliter_f.make;

class program_tracking_cc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::program_tracking_cc.

    To avoid accidental use of raw pointers, dslwp::program_tracking_cc's constructor is in a private implementation class. dslwp::program_tracking_cc::make is the public interface for creating new instances.

    Args:
        enable : 
        path : 
        lon : 
        lat : 
        alt : 
        fc : 
        samp_rate : 
        txrx : 
        verbose : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(enable, path, lon, lat, alt, fc, samp_rate, txrx, verbose):
        """
        make(bool enable, std::string const & path, float lon, float lat, float alt, float fc, uint32_t samp_rate, bool txrx, bool verbose) -> program_tracking_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::program_tracking_cc.

        To avoid accidental use of raw pointers, dslwp::program_tracking_cc's constructor is in a private implementation class. dslwp::program_tracking_cc::make is the public interface for creating new instances.

        Args:
            enable : 
            path : 
            lon : 
            lat : 
            alt : 
            fc : 
            samp_rate : 
            txrx : 
            verbose : 
        """
        return _dslwp_swig.program_tracking_cc_make(enable, path, lon, lat, alt, fc, samp_rate, txrx, verbose)

    make = staticmethod(make)
    __swig_destroy__ = _dslwp_swig.delete_program_tracking_cc
    __del__ = lambda self: None
program_tracking_cc_swigregister = _dslwp_swig.program_tracking_cc_swigregister
program_tracking_cc_swigregister(program_tracking_cc)

def program_tracking_cc_make(enable, path, lon, lat, alt, fc, samp_rate, txrx, verbose):
    """
    program_tracking_cc_make(bool enable, std::string const & path, float lon, float lat, float alt, float fc, uint32_t samp_rate, bool txrx, bool verbose) -> program_tracking_cc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dslwp::program_tracking_cc.

    To avoid accidental use of raw pointers, dslwp::program_tracking_cc's constructor is in a private implementation class. dslwp::program_tracking_cc::make is the public interface for creating new instances.

    Args:
        enable : 
        path : 
        lon : 
        lat : 
        alt : 
        fc : 
        samp_rate : 
        txrx : 
        verbose : 
    """
    return _dslwp_swig.program_tracking_cc_make(enable, path, lon, lat, alt, fc, samp_rate, txrx, verbose)

class program_tracking_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dslwp::program_tracking_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dslwp::program_tracking_cc)> self) -> program_tracking_cc_sptr
        __init__(boost::shared_ptr<(gr::dslwp::program_tracking_cc)> self, program_tracking_cc p) -> program_tracking_cc_sptr
        """
        this = _dslwp_swig.new_program_tracking_cc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(program_tracking_cc_sptr self) -> program_tracking_cc"""
        return _dslwp_swig.program_tracking_cc_sptr___deref__(self)

    __swig_destroy__ = _dslwp_swig.delete_program_tracking_cc_sptr
    __del__ = lambda self: None

    def make(self, enable, path, lon, lat, alt, fc, samp_rate, txrx, verbose):
        """
        make(program_tracking_cc_sptr self, bool enable, std::string const & path, float lon, float lat, float alt, float fc, uint32_t samp_rate, bool txrx, bool verbose) -> program_tracking_cc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dslwp::program_tracking_cc.

        To avoid accidental use of raw pointers, dslwp::program_tracking_cc's constructor is in a private implementation class. dslwp::program_tracking_cc::make is the public interface for creating new instances.

        Args:
            enable : 
            path : 
            lon : 
            lat : 
            alt : 
            fc : 
            samp_rate : 
            txrx : 
            verbose : 
        """
        return _dslwp_swig.program_tracking_cc_sptr_make(self, enable, path, lon, lat, alt, fc, samp_rate, txrx, verbose)


    def history(self):
        """history(program_tracking_cc_sptr self) -> unsigned int"""
        return _dslwp_swig.program_tracking_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(program_tracking_cc_sptr self, int which, int delay)
        declare_sample_delay(program_tracking_cc_sptr self, unsigned int delay)
        """
        return _dslwp_swig.program_tracking_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(program_tracking_cc_sptr self, int which) -> unsigned int"""
        return _dslwp_swig.program_tracking_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(program_tracking_cc_sptr self) -> int"""
        return _dslwp_swig.program_tracking_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(program_tracking_cc_sptr self) -> double"""
        return _dslwp_swig.program_tracking_cc_sptr_relative_rate(self)


    def start(self):
        """start(program_tracking_cc_sptr self) -> bool"""
        return _dslwp_swig.program_tracking_cc_sptr_start(self)


    def stop(self):
        """stop(program_tracking_cc_sptr self) -> bool"""
        return _dslwp_swig.program_tracking_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(program_tracking_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _dslwp_swig.program_tracking_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(program_tracking_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _dslwp_swig.program_tracking_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(program_tracking_cc_sptr self) -> int"""
        return _dslwp_swig.program_tracking_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(program_tracking_cc_sptr self, int m)"""
        return _dslwp_swig.program_tracking_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(program_tracking_cc_sptr self)"""
        return _dslwp_swig.program_tracking_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(program_tracking_cc_sptr self) -> bool"""
        return _dslwp_swig.program_tracking_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(program_tracking_cc_sptr self, int m)"""
        return _dslwp_swig.program_tracking_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(program_tracking_cc_sptr self) -> int"""
        return _dslwp_swig.program_tracking_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(program_tracking_cc_sptr self, int i) -> long"""
        return _dslwp_swig.program_tracking_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(program_tracking_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(program_tracking_cc_sptr self, int port, long max_output_buffer)
        """
        return _dslwp_swig.program_tracking_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(program_tracking_cc_sptr self, int i) -> long"""
        return _dslwp_swig.program_tracking_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(program_tracking_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(program_tracking_cc_sptr self, int port, long min_output_buffer)
        """
        return _dslwp_swig.program_tracking_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(program_tracking_cc_sptr self, int which) -> float
        pc_input_buffers_full(program_tracking_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.program_tracking_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(program_tracking_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(program_tracking_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.program_tracking_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(program_tracking_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(program_tracking_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.program_tracking_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(program_tracking_cc_sptr self, int which) -> float
        pc_output_buffers_full(program_tracking_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.program_tracking_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(program_tracking_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(program_tracking_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.program_tracking_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(program_tracking_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(program_tracking_cc_sptr self) -> pmt_vector_float
        """
        return _dslwp_swig.program_tracking_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(program_tracking_cc_sptr self) -> float"""
        return _dslwp_swig.program_tracking_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(program_tracking_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dslwp_swig.program_tracking_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(program_tracking_cc_sptr self)"""
        return _dslwp_swig.program_tracking_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(program_tracking_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dslwp_swig.program_tracking_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(program_tracking_cc_sptr self) -> int"""
        return _dslwp_swig.program_tracking_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(program_tracking_cc_sptr self) -> int"""
        return _dslwp_swig.program_tracking_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(program_tracking_cc_sptr self, int priority) -> int"""
        return _dslwp_swig.program_tracking_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(program_tracking_cc_sptr self) -> std::string"""
        return _dslwp_swig.program_tracking_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(program_tracking_cc_sptr self) -> std::string"""
        return _dslwp_swig.program_tracking_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(program_tracking_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.program_tracking_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(program_tracking_cc_sptr self) -> io_signature_sptr"""
        return _dslwp_swig.program_tracking_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(program_tracking_cc_sptr self) -> long"""
        return _dslwp_swig.program_tracking_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(program_tracking_cc_sptr self) -> basic_block_sptr"""
        return _dslwp_swig.program_tracking_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(program_tracking_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _dslwp_swig.program_tracking_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(program_tracking_cc_sptr self) -> std::string"""
        return _dslwp_swig.program_tracking_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(program_tracking_cc_sptr self, std::string name)"""
        return _dslwp_swig.program_tracking_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(program_tracking_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dslwp_swig.program_tracking_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(program_tracking_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.program_tracking_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(program_tracking_cc_sptr self) -> swig_int_ptr"""
        return _dslwp_swig.program_tracking_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(program_tracking_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dslwp_swig.program_tracking_cc_sptr_message_subscribers(self, which_port)

program_tracking_cc_sptr_swigregister = _dslwp_swig.program_tracking_cc_sptr_swigregister
program_tracking_cc_sptr_swigregister(program_tracking_cc_sptr)


program_tracking_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
program_tracking_cc = program_tracking_cc.make;



